<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>萝卜就着茶</title>
  <subtitle>Tianmin&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sharecode.cc/"/>
  <updated>2016-12-14T07:56:57.502Z</updated>
  <id>http://sharecode.cc/</id>
  
  <author>
    <name>Tianmin</name>
    <email>181949031@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ASP.NET Core中的Program和Startup类</title>
    <link href="http://sharecode.cc/2016/12/06/Aspnet-Core-Web-GetStarted/"/>
    <id>http://sharecode.cc/2016/12/06/Aspnet-Core-Web-GetStarted/</id>
    <published>2016-12-06T07:35:01.000Z</published>
    <updated>2016-12-14T07:56:57.502Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p><strong>ASP.NET Core简介</strong></p>
<p> ASP.NET Core可用于构建Web应用, 移动应用后端的框架，它是开源且跨平台支持。ASP.NET Core应用可以在.NET Core或者完整的.NET Framework上运行。用户在构建解决方案时可以获得很高的灵活性，因为ASP.NET Core应用是由模块化的组件组成的。用户可以在Windows, Mac和Linux系统中进行跨平台开发并运行应用，ASP.NET Core的开源地址<a href="https://github.com/aspnet" target="_blank" rel="external">GitHub</a>.</p>
<p> ASP.NET Core不在以System.Web.dll为基础，比之前的ASP.NET更加的精简且模块化，现在以Nuget包为基础，用户可以根据需要只使用必要的包。ASP.NET Core较之前ASP.NET版本是Web应用和Web API有统一的构建模式、集成了流行的前端框架和开发流程、包含内置的依赖注入方案、轻量级且模块化的HTTP请求处理管道、 应用可以托管在IIS上，也可以自托管等。</p>
</li>
<li><p><strong>Program类</strong></p>
<p> 这个类在应用的根目下，是一个控制台程序，其中<code>Main</code>方法来构建Web服务器,使用<code>WebHostBuilder</code>来创建Web应用的宿主，这一过程使用建造者模式。方法中指定使用什么Web服务器，可以指定多个选项如<code>UseKestrel()</code>和<code>UseIISIntegration</code>,时用<code>UseStartup&lt;TStartup&gt;()</code>方法来指定应用的启动类，在TStartup类中配置应用的请求管道，用<code>UseContentRoo()</code>方法指定应用的根目录。<code>Build()</code>方法创建Web应用的宿主，<code>Run()</code>方法运行Web应用并开始监听HTTP请求。其中以<code>Use</code>为前缀的方法都由<code>IWebHostBuilder</code>接口的扩展方法来提供。</p>
<pre><code class="brush:csharp">     public class Program
     {
         public static void Main(string[] args)
         {
             var host = new WebHostBuilder()
                 .UseKestrel()
                 .UseContentRoot(Directory.GetCurrentDirectory())
                 .UseIISIntegration()
                 .UseStartup&lt;Startup&gt;()
                 .Build();

             host.Run();
         }
     }
</code></pre>
</li>
<li><p><strong>Startup类</strong></p>
<p> <code>Startup</code>类用来定义请求的处理管道、配置应用所需要时用的服务。ASP.NET应用最少要包含一个<code>Startup</code>类，当一个应用启动时，ASP.NET会在主程序集的所有命名空间中检索名字为<code>Startup</code>的类。<code>Startup</code>类不必须是公有的。如果有多个<code>Startup</code>类的情况，ASP.NET将会在工程的根命名空间中寻找一个，如果没有找到将继续按命名空间的字母顺序寻找。可以为不同的<a href="#">环境</a>分别定义<code>Startup</code>类，在运行时会根据不同的环境在挑选一个合适的。</p>
<ul>
<li><p><code>Startup</code>类的构造函数</p>
<p><code>Startup</code>可以进行构造函数依赖注入，依赖通过<a href="#">内置的依赖注入容器<code>dependency injection</code></a>来提供，通过<code>IHostingEnvironment</code>的实例<code>env</code>来设定<a href="#">IConfigurationRoot</a>实例变量<code>Configuration</code>所需的数据源以便在<code>ConfigureService</code>和<code>Configure</code>方法中读取。</p>
<pre><code class="brush:csharp">  public IConfigurationRoot Configuration { get; }

  public Startup(IHostingEnvironment env)
  {
      var builder = new ConfigurationBuilder()
          .SetBasePath(env.ContentRootPath)
          .AddJsonFile(&quot;appsettings.json&quot;, optional: true, reloadOnChange: true)
          //通过IHostingEnvironment的实例env来设定实例变量Configuration所需的数据源
          .AddJsonFile($&quot;appsettings.{env.EnvironmentName}.json&quot;, optional: true);

      if (env.IsDevelopment())
      {
          // For more details on using the user secret store see https://go.microsoft.com/fwlink/?LinkID=532709
          builder.AddUserSecrets();
      }

      builder.AddEnvironmentVariables();
      Configuration = builder.Build();
  }
</code></pre>
</li>
<li><p><code>Configure</code>方法</p>
<p><code>Startup</code>类必须包含一个<code>Configure</code>方法，应用在启动时会先调用<code>ConfigureService</code>然后再调用<code>Configure</code>方法。<br><code>Configure</code>方法用来定义应用如何响应<code>HTTP</code>请求。通过向<code>IApplicationBuilder</code>实例中添加<a href="#">中间件</a>组件来配置请求管道，可以看到下面示例代码中通过调用<code>IApplicationBuilde</code>的扩展方法来配置执行管道以获得中间件的支持如error pages、BrowserLink、static files、ASP.NET MVC和Identity，调用<code>use</code>为前缀的扩展方将每一个中间件加入到执行管道中，例如用<code>UseMVC</code>扩展方法把路由中间件加入到请求管道中，并用MVC为默认的路由处理器。还有一些服务例如<code>IHostingEnvironment</code>和<code>ILoggerFactory</code>可以通过方法签名以参数方式注入。</p>
<pre><code class="brush:csharp">  // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
  public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
  {
      loggerFactory.AddConsole(Configuration.GetSection(&quot;Logging&quot;));
      loggerFactory.AddDebug();

      if (env.IsDevelopment())
      {
          app.UseDeveloperExceptionPage();
          app.UseDatabaseErrorPage();
          app.UseBrowserLink();
      }
      else
      {
          app.UseExceptionHandler(&quot;/Home/Error&quot;);
      }

      app.UseStaticFiles();

      app.UseIdentity();

      // Add external authentication middleware below. To configure them please see https://go.microsoft.com/fwlink/?LinkID=532715

      app.UseMvc(routes =&gt;
      {
          routes.MapRoute(
              name: &quot;default&quot;,
              template: &quot;{controller=Home}/{action=Index}/{id?}&quot;);
      });
  }
</code></pre>
</li>
<li><p><code>ConfigureService</code>方法</p>
<p><code>ConfigureService</code>方法是可选的，应用在启动时会先于<code>Configure</code>方法被调用，因为功能要在被绑定到执行管道之前注册进来。方法中通过调用<code>IServiceCollection</code>的扩展方法<code>Add[Something]</code>来配置应用需要使用到的服务如Entity Framework、Identity和MVC。通过依赖注入可以使加入到服务容器中服务在应用中可用。</p>
<pre><code class="brush:csharp">  // This method gets called by the runtime. Use this method to add services to the container.
  public void ConfigureServices(IServiceCollection services)
  {
      // Add framework services.
      services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;
          options.UseSqlite(Configuration.GetConnectionString(&quot;DefaultConnection&quot;)));

      services.AddIdentity&lt;ApplicationUser, IdentityRole&gt;()
          .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;()
          .AddDefaultTokenProviders();

      services.AddMvc();

      // Add application services.
      services.AddTransient&lt;IEmailSender, AuthMessageSender&gt;();
      services.AddTransient&lt;ISmsSender, AuthMessageSender&gt;();
  }
</code></pre>
<p>可以看到ASP.NET Corez在应用启动时通过依赖注入提供服务给应用程序，用户可以通过在<code>Startup</code>类构造函数或<code>Configure</code>和<code>ConfigureService</code>方法中以参数的方式得到需要使用的服务。上面代码中方法的执行顺序如下：</p>
</li>
</ul>
<ol>
<li>Startup(IHostingEnvironment env)</li>
<li>ConfigureServices(IServiceCollection services)</li>
<li>Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)</li>
</ol>
</li>
</ol>
<p><em>原文链接:</em></p>
<ol>
<li><em><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/startup" target="_blank" rel="external">https://docs.microsoft.com/en-us/aspnet/core/fundamentals/startup</a></em></li>
<li><em><a href="https://docs.microsoft.com/en-us/aspnet/core/" target="_blank" rel="external">https://docs.microsoft.com/en-us/aspnet/core/</a></em></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ASP.NET Core简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; ASP.NET Core可用于构建Web应用, 移动应用后端的框架，它是开源且跨平台支持。ASP.NET Core应用可以在.NET Core或者完整的.NET Framewo
    
    </summary>
    
    
      <category term="ASP.NET Core" scheme="http://sharecode.cc/tags/ASP-NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core 开发常见问题汇总</title>
    <link href="http://sharecode.cc/2016/12/06/Aspnet-Core-Trouble-Shooting/"/>
    <id>http://sharecode.cc/2016/12/06/Aspnet-Core-Trouble-Shooting/</id>
    <published>2016-12-06T06:08:45.000Z</published>
    <updated>2016-12-14T07:58:33.752Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p><strong>使用VS Code 调试 ASP.NET Core Web 应用常见问题</strong></p>
<ul>
<li><p>Error - Could not find the preLaunchTask ‘build’.<br><img src="http://og24yrsh2.bkt.clouddn.com/AspnetcoreNoPreLanchTaskBuild.png" alt="AspnetcoreNoPreLanchTaskBuild"><br>问题原因是在launch.json里配置了在应用执行前预先执行的任务，但找不到相应的任务。</p>
<pre><code class="brush:js">  &quot;preLaunchTask&quot;: &quot;build&quot;
</code></pre>
<p>点击’Confiure Task Runner’，然后在下图中选择’.NET Core’<br><img src="http://og24yrsh2.bkt.clouddn.com/AspnetcoreTaskRunner.png" alt="AspnetcoreTaskRunner"></p>
<p>在.vscode文件夹下生成tasks.json文件，内容如下，用于编译应用</p>
<pre><code class="brush:js">  {
      // See https://go.microsoft.com/fwlink/?LinkId=733558
      // for the documentation about the tasks.json format
      &quot;version&quot;: &quot;0.1.0&quot;,
      &quot;command&quot;: &quot;dotnet&quot;,
      &quot;isShellCommand&quot;: true,
      &quot;args&quot;: [],
      &quot;tasks&quot;: [
          {
              &quot;taskName&quot;: &quot;build&quot;,
              &quot;args&quot;: [ ],
              &quot;isBuildCommand&quot;: true,
              &quot;showOutput&quot;: &quot;silent&quot;,
              &quot;problemMatcher&quot;: &quot;$msCompile&quot;
          }
      ]
  }
</code></pre>
</li>
<li><p>Error- launch: launch.json must be configured. Change ‘program’ to the path to the executable file that you would like to debug.<br><img src="http://og24yrsh2.bkt.clouddn.com/AspnetcoreNoExecutableFile.png" alt="AspnetcoreNoExecutableFile"><br>问题的原因是找不到可执行文件</p>
<p>点击’open launch.json’可以看到节点</p>
<pre><code class="brush:js">  &quot;program&quot;: &quot;${workspaceRoot}/bin/Debug/&lt;target-framework&gt;/&lt;project-name.dll&gt;&quot;
</code></pre>
<p>将其中<target-framework>和<project-name.dll>替换成工程中bin目录下的真实目录即可。</project-name.dll></target-framework></p>
</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;使用VS Code 调试 ASP.NET Core Web 应用常见问题&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Error - Could not find the preLaunchTask ‘build’.&lt;br&gt;&lt;img 
    
    </summary>
    
    
      <category term="ASP.NET Core" scheme="http://sharecode.cc/tags/ASP-NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>使用PlantUML画类图</title>
    <link href="http://sharecode.cc/2016/11/08/Write-Class-Diagram-PlantUML/"/>
    <id>http://sharecode.cc/2016/11/08/Write-Class-Diagram-PlantUML/</id>
    <published>2016-11-08T08:58:37.000Z</published>
    <updated>2016-12-14T08:07:25.423Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类图-Class-Diagram-表示类与类之间的关系，利用PlantUML来描述这些关系的基本用法如下："><a href="#类图-Class-Diagram-表示类与类之间的关系，利用PlantUML来描述这些关系的基本用法如下：" class="headerlink" title="类图(Class Diagram)表示类与类之间的关系，利用PlantUML来描述这些关系的基本用法如下："></a>类图(Class Diagram)表示类与类之间的关系，利用PlantUML来描述这些关系的基本用法如下：</h3><ol>
<li><p>泛化(Generalization)</p>
<ul>
<li>继承(Extend) - 子类继承父类</li>
<li>实现(Implement) - 具体类实现公共借口</li>
</ul>
</li>
</ol>
<ul>
<li><p>Demo</p>
<pre><code class="brush:text">  @startuml
      package Extend &lt;&lt;Folder&gt;&gt; {
          class Animal {
              +name string
              +void breathe()
          }

          class Human{
              +name string
              +void breathe()
              +void Inovate()
              +void Drive(ICar car)
          }
      }

      package implement &lt;&lt;Folder&gt;&gt; {
          interface ICar {
              +name string
              +void Run()
          }

          class BMW {
              +name string
              +void Run()
          }
      }

      /&#39;泛化 - 继承类&#39;/
      Human -up--|&gt; Animal : extends

      /&#39;泛化 - 实现接口&#39;/
      BMW -up..|&gt; ICar : implements
  @enduml
</code></pre>
</li>
<li><p>Class Diagram<br><img src="http://og24yrsh2.bkt.clouddn.com/Generalization.png" alt="Generalization"></p>
</li>
</ul>
<ol>
<li><p>依赖(Dependency)</p>
<p> 一个类依赖于另外一个类，是一种临时性，有偶然性质的关系，例如人使用手机打电话就是一种临时性的联系，只有人在需要打电话时才产生依赖关系，所以对象之间耦合度低或说联系较弱。在面向对象的语言中般实现为形参，局部变量或静态方法调用。</p>
</li>
</ol>
<ul>
<li><p>Demo</p>
<pre><code class="brush:plain">  @startuml
      class Person {
          +void Call(Phone phone)
      }

      Class Phone

      /&#39;依赖关系用虚线单项箭头表示..&gt;箭头指向被依赖对象&#39;/
      Person -right..&gt; Phone : use
  @enduml
</code></pre>
</li>
<li><p>Class Diagram<br><img src="http://og24yrsh2.bkt.clouddn.com/Dependency.png" alt="Dependency"></p>
</li>
</ul>
<ol>
<li><p>关联(Association)</p>
<p> 关联表示类与类之间的关系，非偶然且长期的关系，关联的对象之间是平等的。关联关系可以是单向的、双向的、自关联及多维关联。</p>
<ul>
<li>单向关联 - 只有关联对象知道这种关系，被关联对象不知道这种关系，单向箭头指向被关联对象</li>
</ul>
</li>
</ol>
<ul>
<li><p>Demo</p>
<pre><code class="brush:plain">  @startuml
      package Unidirectional &lt;&lt;cloud&gt;&gt; {
          class person
          class TV
      }

      /&#39;单项关联用实线箭头表示--&gt;&#39;/
      person -right--&gt; TV : watch
  @enduml
</code></pre>
</li>
<li><p>Class Diagram<br><img src="http://og24yrsh2.bkt.clouddn.com/UnidirectionalAssociation.png" alt="UnidirectionalAssociation"></p>
<ul>
<li>双向关联 - 实体之间默认的关联关系，被关联对象彼此都知道关联关系，没有箭头指向</li>
</ul>
</li>
<li><p>Demo</p>
<pre><code class="brush:plain">  @startuml
      package Bidirectional &lt;&lt;Frame&gt;&gt; {
          class boyfriend
          class girlfirend

          /&#39;双向关联的对象用实线连接--&#39;/
          boyfriend -right--girlfirend : marry
      }
  @enduml
</code></pre>
</li>
<li><p>Class Diagram<br><img src="http://og24yrsh2.bkt.clouddn.com/BidirectionalAssociation.png" alt="BidirectionalAssociation"></p>
<ul>
<li>多维关联 - 表示多个实体之间的关系</li>
</ul>
</li>
<li><p>Demo</p>
<pre><code class="brush:plain">  @startuml
      package N-ary &lt;&lt;Association&gt;&gt; {
          class owner
          class buyer
          class agent {
              void coordinate()
          }

          owner -- buyer
          (owner,buyer) -- agent
      }
  @enduml
</code></pre>
</li>
<li><p>Class Diagram<br><img src="http://og24yrsh2.bkt.clouddn.com/N-aryAssociation.png" alt="N-aryAssociation"></p>
<ul>
<li>自身关联 - 表示同一个实体多个实例之间的联系</li>
</ul>
</li>
<li><p>Demo</p>
<pre><code class="brush:plain">  @startuml
      class bug

      bug &quot;0..*&quot; -up-- &quot;1..*&quot; bug : propagate
  @enduml
</code></pre>
</li>
<li><p>Class Diagram<br><img src="http://og24yrsh2.bkt.clouddn.com/SelfAssociation.png" alt="SelfAssociation"></p>
</li>
</ul>
<ol>
<li><p>聚合(Aggregation)</p>
<p> 聚合表示一种整体和局部的关系，整体和局部是一种不平等的关系，可以理解为”has - a”的关系，局部对象的生命周期独立于整体对象，例如人群和张三的关系，张三离开人群还在。</p>
</li>
</ol>
<ul>
<li><p>Demo</p>
<pre><code class="brush:plain">  @startuml
      package Aggregation &lt;&lt;Frame&gt;&gt;{
          class crowd {
              ~List&lt;person&gt; people
          }

          class person

          /&#39;聚合用空心菱形实线表示o--&#39;/
          crowd o---right person : have
      }
  @enduml
</code></pre>
</li>
<li><p>Class Diagram<br><img src="http://og24yrsh2.bkt.clouddn.com/Aggregation.png" alt="Aggregation"></p>
</li>
</ul>
<ol>
<li><p>组合(Composition)</p>
<p> 组合也表示一种整体和局部的关系，可以理解为”contain - a”的关系，整体和局部具有相同的生命周期，例如人和心、肺的关系。</p>
</li>
</ol>
<ul>
<li><p>Demo</p>
<pre><code class="brush:plain">  @startuml
      package Composition &lt;&lt;frame&gt;&gt; {
          class Human {
              -Heart heart
              -Lung lung 
          }

          class Heart
          class Lung

          /&#39;组合用实心菱形实线表示*--&#39;/
          Human *-- Heart : contains
          Human *-- Lung
      }
  @enduml
</code></pre>
</li>
<li><p>Class Diagram<br><img src="http://og24yrsh2.bkt.clouddn.com/Composition.png" alt="Composition"></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;类图-Class-Diagram-表示类与类之间的关系，利用PlantUML来描述这些关系的基本用法如下：&quot;&gt;&lt;a href=&quot;#类图-Class-Diagram-表示类与类之间的关系，利用PlantUML来描述这些关系的基本用法如下：&quot; class=&quot;heade
    
    </summary>
    
    
      <category term="UML" scheme="http://sharecode.cc/tags/UML/"/>
    
      <category term="PlantUML" scheme="http://sharecode.cc/tags/PlantUML/"/>
    
      <category term="Class Diagram" scheme="http://sharecode.cc/tags/Class-Diagram/"/>
    
  </entry>
  
  <entry>
    <title>React Native - Picker</title>
    <link href="http://sharecode.cc/2016/11/04/React-Native-Picker/"/>
    <id>http://sharecode.cc/2016/11/04/React-Native-Picker/</id>
    <published>2016-11-04T09:27:37.000Z</published>
    <updated>2016-12-14T08:09:08.816Z</updated>
    
    <content type="html"><![CDATA[<h3 id="选择框"><a href="#选择框" class="headerlink" title="选择框"></a>选择框</h3><ul>
<li><p>selectedValue 当前选中值</p>
</li>
<li><p>mode <code>Android Only</code> 展现方式</p>
<ol>
<li>dialog:对话框形式 </li>
<li>dropdown:下拉框形式</li>
</ol>
</li>
<li><p>prompt <code>Android Only</code> 当以对话框形式显示时的提示标题</p>
</li>
<li><p>onValueChange 当选项变化时的回调 </p>
<ol>
<li>itemValue:当前选中的值</li>
<li>itemPosition:当前选中的项的索引</li>
</ol>
</li>
</ul>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><pre><code class="brush:js">    &#39;use strict&#39;

    import React, { Component } from &#39;react&#39;;

    import {
        View,
        StyleSheet,
        Picker,
        ToastAndroid,
    } from &#39;react-native&#39;

    export default class PickerDemo extends Component {
        constructor(props) {
            super(props);
        }

        componentWillMount() {
            this.City = [&#39;Beijing&#39;,&#39;ShangHai&#39;];
            this.BeijingDist = [&#39;东城&#39;,&#39;崇文&#39;, &#39;西城&#39;,&#39;宣武&#39;];
            this.ShangHaiDist = [&#39;黄浦&#39;,&#39;卢湾&#39;,&#39;徐汇&#39;,&#39;长宁&#39;,&#39;静安&#39;];

            this.state = {
                selectedCity: this.City[0],
                selectedDistrict: this.BeijingDist[0],
            };
        }

        render() {
            let CityOption = this.City.map(function(city) {
                return (
                    &lt;Picker.Item label = {city} value = {city}/&gt;
                );
            });

            let District = null;

            if (this.state.selectedCity === this.City[0]) {
                District = this.BeijingDist;
            } else {
                District = this.ShangHaiDist;
            }

            let DistOption = District.map(function (dist) {
                return (
                    &lt;Picker.Item label={dist} value={dist} /&gt;
                );
            });

            return (
                &lt;View style={styles.flex}&gt;
                    &lt;Picker
                        selectedValue = {this.state.selectedCity}
                        onValueChange = {(city) =&gt; {this.setState({selectedCity:city})}}
                        mode = &#39;dropdown&#39;
                    &gt;
                        {CityOption}
                    &lt;/Picker&gt;
                    &lt;Picker
                        selectedValue = {this.state.selectedDistrict}
                        onValueChange = {this.onDistrictChange}
                        mode = &#39;dialog&#39;
                        prompt = &#39;选择区&#39;
                    &gt;
                        {DistOption}
                    &lt;/Picker&gt;
                &lt;/View&gt;
            );
        }

        onDistrictChange = (itemValue, itemPosition) =&gt; {
            this.setState({
                selectedDistrict: itemValue,
            });

            ToastAndroid.showWithGravity(`Selected index is ${itemPosition}`,ToastAndroid.SHORT,ToastAndroid.CENTER);
        }

        componentWillUpdate(nextProps, nextStates) {
            //只变换区时执行一次。
            //变换城市是执行两次，因为selectedCity和selectedDistrict相继发生变化，引起重新render()
            ToastAndroid.showWithGravity(`City changed from ${this.state.selectedDistrict} to ${nextStates.selectedDistrict}`,ToastAndroid.SHORT,ToastAndroid.CENTER);
        }
    }

    const styles = StyleSheet.create({
        flex: {
            flex:1,
            justifyContent: &#39;center&#39;
        }
    });
</code></pre>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="http://og24yrsh2.bkt.clouddn.com/Picker.gif" alt="Picker Demo"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;选择框&quot;&gt;&lt;a href=&quot;#选择框&quot; class=&quot;headerlink&quot; title=&quot;选择框&quot;&gt;&lt;/a&gt;选择框&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;selectedValue 当前选中值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mode &lt;code&gt;Android O
    
    </summary>
    
    
      <category term="React Native" scheme="http://sharecode.cc/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Hexo - Hightlight source code with Google Code Prettify</title>
    <link href="http://sharecode.cc/2016/11/03/Hexo_Hightlight/"/>
    <id>http://sharecode.cc/2016/11/03/Hexo_Hightlight/</id>
    <published>2016-11-03T07:39:27.000Z</published>
    <updated>2016-12-14T08:10:43.011Z</updated>
    
    <content type="html"><![CDATA[<p><em>It’s not recommended way to do hightlight since it breaks rule <a href="https://github.com/DavidAnson/markdownlint/blob/v0.2.0/doc/Rules.md#md033---inline-html" target="_blank" rel="external">no-inline-html</a></em></p>
<h3 id="Download-Prettify"><a href="#Download-Prettify" class="headerlink" title="Download Prettify"></a>Download Prettify</h3><ol>
<li>Download js from <a href="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js" target="_blank" rel="external">cdn.rawgit.com</a> or <a href="//cdn.bootcss.com/prettify/r298/prettify.min.js">www.bootcdn.cn</a></li>
<li>Save it to themes\landscape\source\js\</li>
<li>Download you prefer css from <a href="https://jmblog.github.io/color-themes-for-google-code-prettify/" target="_blank" rel="external">https://jmblog.github.io/color-themes-for-google-code-prettify/</a></li>
<li>Rename it as prettify.css, then save to source\css\prettify\</li>
</ol>
<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><ol>
<li><p>Add below code at the bottom of layout_partial\after-footer.ejs</p>
<pre><code class="brush:js"> &lt;%- js(&#39;js/script&#39;,&#39;js/run_prettify&#39;) %&gt;
 &lt;%- css(&#39;css/prettify/prettify&#39;) %&gt;
</code></pre>
</li>
<li><p>Using raw HTML <code>&lt;PRE&gt;</code> block in MD file as below</p>
<pre><code class="brush:html"> &lt;pre class=&quot;prettyprint linenums lang-cs&quot;&gt;
 int a = 0;
 string s = string.empty
 &lt;/pre&gt;
</code></pre>
</li>
<li><p>Above markdown will display C# code as expectation</p>
<pre class="prettyprint linenums lang-cs">
int a = 0;
string s = string.empty
</pre>

</li>
</ol>
<h3 id="Hightlight-Style-Optional"><a href="#Hightlight-Style-Optional" class="headerlink" title="Hightlight Style (Optional)"></a>Hightlight Style (Optional)</h3><ol>
<li><p>You could find some customized style via blew links<br> <a href="https://jmblog.github.io/color-themes-for-google-code-prettify/" target="_blank" rel="external">https://jmblog.github.io/color-themes-for-google-code-prettify/</a><br> <a href="https://rawgit.com/google/code-prettify/master/styles/index.html" target="_blank" rel="external">https://rawgit.com/google/code-prettify/master/styles/index.html</a></p>
</li>
<li><p>Replace source\css\prettify\prettify.css with you downlaod CSS</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;It’s not recommended way to do hightlight since it breaks rule &lt;a href=&quot;https://github.com/DavidAnson/markdownlint/blob/v0.2.0/doc/Ru
    
    </summary>
    
    
      <category term="Hexo" scheme="http://sharecode.cc/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Design Pattern - Observer</title>
    <link href="http://sharecode.cc/2016/11/03/Design-Pattern-Observer/"/>
    <id>http://sharecode.cc/2016/11/03/Design-Pattern-Observer/</id>
    <published>2016-11-03T07:39:27.000Z</published>
    <updated>2016-12-14T08:11:25.222Z</updated>
    
    <content type="html"><![CDATA[<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><ol>
<li><p>当一个对象的行为或状态变化引起另外一组对象的行为或状态变化时，或者说一组对象需要关心某一个对象的变化而作出相应的变化时，可以使用观察者模式。</p>
</li>
<li><p>它定义了多对一的依赖关系，即多个观察者对一个被观察对象的依赖。</p>
</li>
<li><p>观察者模式可以实现观察者和被观察对象之间的解耦，各自对立变化不会影响彼此，被观察对象只需知晓观察着的抽象接口(行为)，不用关心观察者的具体行为，也不用关心观察着的数量。</p>
</li>
</ol>
<pre><code class="brush:c#">    using System;

    namespace Observer
    {
        class Program
        {
            static void Main(string[] args)
            {
                //定义观察者即读者
                Subscriber objSA = new Subscriber(&quot;Subscriber A&quot;);
                Subscriber objSB = new Subscriber(&quot;Subscriber B&quot;);

                //定义被观察对象即订阅号
                WeChatSubscrptionAccount objWSA = new WeChatSubscrptionAccount(&quot;WeChatSubscrption&quot;);

                //通过委托让订阅号知道需要通知哪些读者
                objWSA.AddObserver(new NotifyObserver(objSA.DoSomething));
                objWSA.AddObserver(new NotifyObserver(objSB.DoSomething));

                //被观察者行为即订阅号发布新文章
                objWSA.CreateNewArticle(new EventArgs());
                Console.Read();
            }
        }

        //委托用来引用观察者抽象行为，即读、不读、退订或其它
        public delegate void NotifyObserver(Subject Sender, EventArgs e);

        //抽象被观察对象
        public class Subject {
            public string Name;

            public Subject(string strName) {
                this.Name = strName;
            }

            //定义被观察对象的行为
            public event NotifyObserver SubjectAct;

            //当被观察对象的行为发生时，观察者会做出相应的反应
            public void OnSubjectAct(EventArgs e)
            {
                //如果已经有观察者
                if (SubjectAct != null)
                {
                    //观察者的具体行为
                    SubjectAct(this, e);
                }
            }

            //被观察对象保持观察者的抽象行为
            public void AddObserver(NotifyObserver objObserverAct)
            {
                SubjectAct += objObserverAct;
            }

            //被观察对象移除观察者的抽象行为
            public void RemoveObserver(NotifyObserver objObserverAct)
            {
                SubjectAct -= objObserverAct;
            }
        }

        //具体被观察对象，微信订阅号
        public class WeChatSubscrptionAccount : Subject {
            public WeChatSubscrptionAccount(string strName) : base(strName) { }

            //当新文章创建后要通知所有订阅者
            public void CreateNewArticle(EventArgs e)
            {
                Console.WriteLine(&quot;Send new article.&quot;);

                //通知所有订阅者
                this.OnSubjectAct(e);
            }
        }

        //观察者
        public interface Observer {
            //观察者抽象行为
            void DoSomething(Subject Sender, EventArgs e);
        }

        //具体观察者，读者
        public class Subscriber : Observer {
            private string Name;

            public Subscriber(string strName)
            {
                this.Name = strName;
            }

            //读者具体行为
            public void DoSomething(Subject Sender, EventArgs e) {
                Console.WriteLine($&quot;{this.Name} is going to do something about {Sender.Name}.&quot;);
            }
        }
    }
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;当一个对象的行为或状态变化引起另外一组对象的行为或状态变化时，或者说一组对象需要关心某一个对象的变
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://sharecode.cc/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>React Native DrawerLayoutAndroid(抽屉) 组件的使用</title>
    <link href="http://sharecode.cc/2016/10/13/React-Native-DrawerLayoutAndroid/"/>
    <id>http://sharecode.cc/2016/10/13/React-Native-DrawerLayoutAndroid/</id>
    <published>2016-10-13T04:15:42.000Z</published>
    <updated>2016-12-14T08:14:31.286Z</updated>
    
    <content type="html"><![CDATA[<p>DrawerLayout又称抽屉，一般用于显示或隐藏屏幕侧方的导航条(View)，用户通过手势滑动屏幕或点击按钮调用openDrawer()或closeDrawer()控制导航条(View)的显示。</p>
<p>属性如下：</p>
<ol>
<li><p>renderNavigationView - 设置回调函数指定要渲染的导航条(View) - 用户自定义View组件</p>
</li>
<li><p>drawerWidth - 设置滑动出的导航条(View)的宽度， Demo中设定屏幕的一半</p>
</li>
<li><p>drawerBackgroundColor - 设置滑动出的导航条(View)的背景色，可用rgba设置透明度</p>
</li>
<li><p>drawerPosition - 设置导航条(View)从哪一侧滑出，DrawerConsts.DrawerPosition.Left 或 DrawerConsts.DrawerPosition.Right</p>
</li>
<li><p>drawerLockMode - 设置导航条(View)锁定状态，’unlocked’处于为锁定状态，滑动手势和方法调用均可以打开或关闭导航条, ‘locked-closed’和’locked-open’表示NavigationView处于关闭或打开状态，并将其锁定不再响应手势，但依然可以通过openDrawer()或closeDrawer()控制打开或关闭。</p>
</li>
<li><p>keyboardDismissMode - 表示打开导航条(View)是如何处理已处于显示状态的键盘，此时键盘输入相应。’none’键盘继续保持显示状态，’on-drag’键盘自动隐藏。</p>
<p> <img src="http://og24yrsh2.bkt.clouddn.com/keyboardDismissMode.gif" alt="keyboardDismissMode=&#39;on-drag&#39;"></p>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p>statusBarBackgroundColor - API 21后支持，设置手机状态栏背景色，并且导航条(View)现实时会覆盖手机状态栏。</p>
<p> <img src="http://og24yrsh2.bkt.clouddn.com/statusBarBackgroundColor.gif" alt="statusBarBackgroundColor=&#39;#1e90ff&#39;"></p>
</li>
<li><p>onDrawerClose - 设置当导航条(View)关闭后的回调</p>
</li>
<li><p>onDrawerOpen - 设置当导航条(View)打开后的回调</p>
</li>
<li><p>onDrawerStateChanged - 设置当导航条(View)状态改变是的回调</p>
</li>
</ol>
<p><strong><em>注意:</em></strong> 导航条会在三种状态下切换。’idle’: 没有任何发生任何与导航条(View)的交互，’dragging’: 正在和导航条(View)发生交互，<br>打开或关闭的过程, ‘setting’ 表示导航条(View)已经完成打开或关闭。</p>
<p>Demo中导航条(View)点击Setting按钮后调用openDrawer()显示导航条，此过程中onDrawerStateChanged设置的回调执行了2次，导航条打开时状态从’idle’变为’dragging’, 此时显示第一次’State Changed‘，导航条完成显示动作，此时onDrawerOpen的回调被执行，显示’Drawer Opened’, 这时导航条状态由’dragging’变为’setting’, 再次显示’State Changed’，至次状态改变全部完成。导航条关闭时同理。</p>
<p><img src="http://og24yrsh2.bkt.clouddn.com/DrawerLayoutAndroid.gif" alt="onDrawerStateChanged"></p>
<p>DrawerLayoutAndroid方法有两个openDrawer()和closeDrawer()用于程序控制导航条开关。</p>
<p>Demo完整代码如下:</p>
<pre><code class="brush:js">    &#39;use strict&#39;;

    import React, { Component } from &#39;react&#39;;

    import {
        View,
        Text,
        StyleSheet,
        DrawerLayoutAndroid,
        Dimensions,
        TouchableOpacity,
        TextInput,
        ToastAndroid,
    } from &#39;react-native&#39;;

    export default class DLAExample extends Component {
        constructor(props) {
            super(props);

            this.state = {
                position: DrawerLayoutAndroid.positions.Left,
            };

            this.Naview = (
                &lt;View style={styles.NavigationView}&gt;
                    &lt;Text&gt;Menu1&lt;/Text&gt;
                    &lt;Text&gt;Menu2&lt;/Text&gt;
                    &lt;Text&gt;Menu3&lt;/Text&gt;
                &lt;/View&gt;
            );
        }

        render() {
            let { width } = Dimensions.get(&#39;window&#39;);

            return (
                    &lt;DrawerLayoutAndroid
                        ref=&quot;DrawerLayout&quot;
                        drawerWidth={width / 2}
                        drawerBackgroundColor=&#39;rgba(255,255,255,0.8)&#39;
                        renderNavigationView={() =&gt; this.Naview}
                        drawerPosition={this.state.position}
                        keyboardDismissMode=&#39;on-drag&#39;
                        drawerLockMode=&#39;unlocked&#39;
                        statusBarBackgroundColor=&#39;#1e90ff&#39;
                        onDrawerClose={() =&gt; ToastAndroid.showWithGravity(&#39;Drawer Closed&#39;,ToastAndroid.SHORT, ToastAndroid.BOTTOM)}
                        onDrawerOpen={() =&gt; ToastAndroid.showWithGravity(&#39;Drawer Opened&#39;,ToastAndroid.SHORT, ToastAndroid.TOP)}
                        onDrawerStateChanged={() =&gt; ToastAndroid.showWithGravity(&#39;State Changed&#39;,ToastAndroid.SHORT, ToastAndroid.CENTER)}
                    &gt;
                        &lt;View style = {styles.container}&gt;
                            &lt;TouchableOpacity 
                                style={styles.Button} 
                                onPress={() =&gt; {
                                        this.refs[&#39;DrawerLayout&#39;].openDrawer();
                                    }
                                }
                            &gt;
                                &lt;Text&gt;Setting&lt;/Text&gt;
                            &lt;/TouchableOpacity&gt;
                            &lt;TextInput style={{width:200}}&gt;keyboard dismiss on drag&lt;/TextInput&gt;
                        &lt;/View&gt;
                    &lt;/DrawerLayoutAndroid&gt;
            );
        }

    }

    const styles = StyleSheet.create({
        container: {
            flex: 1,
            justifyContent: &#39;center&#39;,
            alignItems: &#39;center&#39;,
        },

        NavigationView: {
            flex:1,
            justifyContent: &#39;space-around&#39;,
            alignItems: &#39;center&#39;, 
        },

        Button: {
            height:100,
            width:100,
            margin:20,
            backgroundColor:&#39;#90ee90&#39;,
            borderRadius: 50,
            justifyContent: &#39;center&#39;,
            alignItems: &#39;center&#39;,
        }
    });
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DrawerLayout又称抽屉，一般用于显示或隐藏屏幕侧方的导航条(View)，用户通过手势滑动屏幕或点击按钮调用openDrawer()或closeDrawer()控制导航条(View)的显示。&lt;/p&gt;
&lt;p&gt;属性如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;renderNavigationView - 设置回调函数指定要渲染的导航条(View) - 用户自定义View组件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;drawerWidth - 设置滑动出的导航条(View)的宽度， Demo中设定屏幕的一半&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;drawerBackgroundColor - 设置滑动出的导航条(View)的背景色，可用rgba设置透明度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;drawerPosition - 设置导航条(View)从哪一侧滑出，DrawerConsts.DrawerPosition.Left 或 DrawerConsts.DrawerPosition.Right&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;drawerLockMode - 设置导航条(View)锁定状态，’unlocked’处于为锁定状态，滑动手势和方法调用均可以打开或关闭导航条, ‘locked-closed’和’locked-open’表示NavigationView处于关闭或打开状态，并将其锁定不再响应手势，但依然可以通过openDrawer()或closeDrawer()控制打开或关闭。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;keyboardDismissMode - 表示打开导航条(View)是如何处理已处于显示状态的键盘，此时键盘输入相应。’none’键盘继续保持显示状态，’on-drag’键盘自动隐藏。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://og24yrsh2.bkt.clouddn.com/keyboardDismissMode.gif&quot; alt=&quot;keyboardDismissMode=&amp;#39;on-drag&amp;#39;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="React Native" scheme="http://sharecode.cc/tags/React-Native/"/>
    
      <category term="Android" scheme="http://sharecode.cc/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>React Native ActivityIndicator 组件的使用</title>
    <link href="http://sharecode.cc/2016/10/09/React-Native-ActivityIndicator/"/>
    <id>http://sharecode.cc/2016/10/09/React-Native-ActivityIndicator/</id>
    <published>2016-10-09T09:34:22.000Z</published>
    <updated>2016-12-14T08:10:30.323Z</updated>
    
    <content type="html"><![CDATA[<p>ActivityIndicator 用来在应用进行一些耗时操作时显示一个旋转的圆形指示器，有以下属性。</p>
<ol>
<li><p>animating 决定显不显示indicator, 默认显示。</p>
</li>
<li><p>color 颜色</p>
</li>
<li><p>size 尺寸的可选值为’small’或者’large’, 默认值为’small’。Android平台支持传入数值作为参数。</p>
</li>
</ol>
<p>下面代码简单展示组件及其属性如何使用。<br><a id="more"></a></p>
<pre><code class="brush:js">    &#39;use strict&#39;;

    import React, { Component } from &#39;react&#39;;
    import {
        View,
        StyleSheet,
        ActivityIndicator,
        Text,
    } from &#39;react-native&#39;;


    export default class ActivityIndicatorExample extends Component {
        //_timer用于保存setInterval函数返回定时器的ID
        _timer: React.PropTypes.number;

        constructor(props) {
            super(props);
        }

        componentWillMount() {
            //组建渲染前初始化组建状态，默认显示Indicator及其下面文字。
            this.setState({
                animating: true,
                opacity: 1
            });
        }

        render() {
            return(
                &lt;View style={styles.container}&gt;
                    &lt;ActivityIndicator
                        animating={this.state.animating}
                        color=&#39;mediumspringgreen&#39;
                        size={200}
                    /&gt;
                    &lt;View style={{opacity: this.state.opacity}}&gt;
                        &lt;Text&gt;loading&lt;/Text&gt;
                    &lt;/View&gt;
                &lt;/View&gt;
            );
        }

        componentDidMount() {
            //组建加载完成后设定定时函数
            this.ToggleIndicator();
        }

        ToggleIndicator() {
            //每隔两秒切换Indicator显示的状态
            this._timer = setInterval(() =&gt; {
                this.setState({
                    animating: !this.state.animating,
                    opacity: this.state.opacity === 1 ? 0 : 1,
                });
            }, 2000);
        }

        componentWillUnmount() {
            //组件卸载前取消由setInterval()方法设置的定时器
            clearInterval(this._timer);
        }
    }

    const styles = StyleSheet.create({
        container: {
            flex: 1,
            justifyContent: &#39;center&#39;,
            alignItems: &#39;center&#39;,
        },
    });
</code></pre>
<p>代码运行效果：<br><img src="http://og24yrsh2.bkt.clouddn.com/ezgif.com-gif-maker.gif" alt="ActivityIndicator Running"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ActivityIndicator 用来在应用进行一些耗时操作时显示一个旋转的圆形指示器，有以下属性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;animating 决定显不显示indicator, 默认显示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;color 颜色&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;size 尺寸的可选值为’small’或者’large’, 默认值为’small’。Android平台支持传入数值作为参数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面代码简单展示组件及其属性如何使用。&lt;br&gt;
    
    </summary>
    
    
      <category term="React Native" scheme="http://sharecode.cc/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Data Struct - Stack - C#</title>
    <link href="http://sharecode.cc/2016/09/07/Data-Struct-Stack-CS/"/>
    <id>http://sharecode.cc/2016/09/07/Data-Struct-Stack-CS/</id>
    <published>2016-09-07T02:58:05.000Z</published>
    <updated>2016-12-14T08:12:44.668Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="brush:c#">    public static class Stack&lt;T&gt; {
        private static T[] values;
        private static int capacity = 10;
        private static int size = 0;
        private static readonly Object objSync;

        static Stack(){
            objSync = new object();

            if (values == null) {
                lock (objSync) {
                    if (values == null) {
                        values = new T[capacity];
                    }
                }
            }
        }

        internal static void Push(T item) {
            if (values.Length == size) {
                T[] newValues = new T[values.Length + (values.Length /2)];
                Array.Copy(values, newValues, values.Length);
                values = newValues;
            }

            values[size++] = item;
        }

        internal static T Pop() {
            if (size &gt; 0) {
                return values[--size];
            }

            return default(T);
        }

        internal static T Peek() {
            if (size &gt; 0)
                return values[size - 1];

            return default(T);
        }

        internal static string ShowStack() {
            StringBuilder sb = new StringBuilder();

            for (int i = size -1;i &gt; 0;i--)
                sb.Append(values[i]==null? string.Empty: values[i].ToString() + &quot; | &quot;);

            return sb.ToString();
        }
    }
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code class=&quot;brush:c#&quot;&gt;    public static class Stack&amp;lt;T&amp;gt; {
        private static T[] values;
        private static int capacity 
    
    </summary>
    
    
      <category term="Data Struct" scheme="http://sharecode.cc/tags/Data-Struct/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm BF for Pattern Matching in String</title>
    <link href="http://sharecode.cc/2016/09/01/BF-Algorithm-for-Pattern-Matching-in-String/"/>
    <id>http://sharecode.cc/2016/09/01/BF-Algorithm-for-Pattern-Matching-in-String/</id>
    <published>2016-09-01T01:22:51.000Z</published>
    <updated>2016-12-14T08:12:50.767Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="brush:c#">    static void Main(string[] args)
    {
        string s = &quot;abcdefg&quot;;
        string p = &quot;ddc&quot;;

        Stopwatch a =  Stopwatch.StartNew();

        int index = BFIndexOf(s, p);

        a.Stop();

        Console.WriteLine(&quot;The index of {0} in {1} is {2}, time elapsed {3}&quot;, p, s, index, a.Elapsed.TotalMilliseconds);

        a.Restart();

        index = BFIndexOf2(s, p);

        a.Stop();

        Console.WriteLine(&quot;The index of {0} in {1} is {2}, time elapsed {3}&quot;, p, s, index, a.Elapsed.TotalMilliseconds);

        Console.ReadKey();
    }

    public static int BFIndexOf(string s, string p)
    {
        int sLength = s.Length;
        int pLength = p.Length;
        int i = 0;

        while (i &lt; sLength)
        {
            int j = 0;

            while (j &lt; pLength &amp;&amp; s[i] == p[j])
            {
                i++;
                j++;
            }

            if (j == pLength)
            {
                return i - j;
            }
            else {
                i++;
            }
        }

        return -1;
    }

    public static int BFIndexOf2(string s, string p)
    {
        int sLength = s.Length;
        int pLength = p.Length;
        int i = 0,j = 0;

        while (i &lt; sLength &amp;&amp; j &lt; pLength)
        {
            if (s[i] == p[j])
            {
                i++;
                j++;
            }
            else {
                i = i - j + 1;
                j = 0;
            }
        }

        if (j == pLength)
        {
            return i - j;
        }
        else {
            return -1;
        }
    }
</code></pre>
<pre><code>The index of cde in abcdefg is 2, time elapsed in BFIndexOf 0.3359 
The index of cde in abcdefg is 2, time elapsed in BFIndexOf2 0.298
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code class=&quot;brush:c#&quot;&gt;    static void Main(string[] args)
    {
        string s = &amp;quot;abcdefg&amp;quot;;
        string p = &amp;quot;ddc&amp;q
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://sharecode.cc/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Insertion Sort - C#</title>
    <link href="http://sharecode.cc/2016/08/26/Algorithm-Insertion-Sort-CS/"/>
    <id>http://sharecode.cc/2016/08/26/Algorithm-Insertion-Sort-CS/</id>
    <published>2016-08-26T08:38:04.000Z</published>
    <updated>2016-12-14T08:13:10.642Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>Pick up item one by one from unordered list to insert to ordered list.<br><a id="more"></a></p>
<h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><pre><code class="brush:c#">    public class InsertionSort&lt;T&gt; where T: IComparer&lt;T&gt;
    {
        /// &lt;summary&gt;
        /// Pick up item one by one from unordered list to insert to ordered list.
        /// &lt;/summary&gt;
        /// &lt;typeparam name=&quot;list&quot;&gt;
        /// List waiting for sort, item in it must be something implemented IComparer
        /// &lt;/typeparam&gt;
        public static void Sort(T[] list) {
            T temp;
            int i, j;

            for (i = 1; i &lt; list.Length; i++) {
                //Pick up one item by order in unordered list
                temp = list[i];
                //Index of the end of ordered list
                j = i - 1;

                //Start loop from the end of ordered list to find the right position for item in temp
                //Loop until J reached the start of ordered list or temp is larger than 
                //or equal to some item in ordered list
                while (j &gt;= 0 &amp;&amp; list[j].Compare(temp, list[j]) &lt; 0) {
                    list[j + 1] = list[j];
                    j--;
                }

                //Set item in temp to right postion
                list[j + 1] = temp;
            }
        }

        public static void ShowList(T[] list) {
            foreach (T item in list)
                Console.WriteLine(item.ToString());
        }
    }

    public class Ball : IComparer&lt;Ball&gt; {
        public int Size { get; set; }
        public string Name { get; set; }

        public Ball(int size, string name) {
            this.Size = size;
            this.Name = name;
        }

        public int Compare(Ball x, Ball y) {
            return x.Size.CompareTo(y.Size);
        }

        public override string ToString() {
            return this.Name;
        }
    }
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h4&gt;&lt;p&gt;Pick up item one by one from unordered list to insert to ordered list.&lt;br&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://sharecode.cc/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Reload JS Does Not Work</title>
    <link href="http://sharecode.cc/2016/08/15/Reload-JS-Does-Not-Work/"/>
    <id>http://sharecode.cc/2016/08/15/Reload-JS-Does-Not-Work/</id>
    <published>2016-08-15T07:35:12.000Z</published>
    <updated>2016-12-14T08:15:12.120Z</updated>
    
    <content type="html"><![CDATA[<p>Js change does not reflect on device/simulator when you try reload JS from packager.</p>
<p>Try below solution might help.</p>
<ol>
<li><p>Increase the const MAX_WAIT_TIME in %yourproject%\node_modules\react-native\node_modules\node-haste\lib\FileWatcher\index.js<br>or %yourproject%node_modules\react-native\packager\react-packager\src\node-haste\FileWatcher\index.js</p>
<pre><code class="brush:js"> var MAX_WAIT_TIME = 360000;
</code></pre>
<p> Try blew if step 1 does not work</p>
</li>
<li><p>Change function ‘_createWatcher’</p>
<p> From:</p>
<pre><code class="brush:js">     key: &#39;_createWatcher&#39;,
         value: function _createWatcher(rootConfig) {
         var watcher = new WatcherClass(rootConfig.dir, {
             glob: rootConfig.globs,
             dot: false
         });

         return new Promise(function (resolve, reject) {
             var rejectTimeout = setTimeout(function () {
             return reject(new Error(timeoutMessage(WatcherClass)));
             }, MAX_WAIT_TIME);

             watcher.once(&#39;ready&#39;, function () {
             clearTimeout(rejectTimeout);
             resolve(watcher);
             });
         });
         }
</code></pre>
<p> To:</p>
<pre><code class="brush:js">     key: &#39;_createWatcher&#39;,
         value: function _createWatcher(rootConfig) {
         var watcher = new WatcherClass(rootConfig.dir, {
             glob: rootConfig.globs,
             dot: false
         });

         return new Promise(function (resolve, reject) {

             const rejectTimeout = setTimeout(function() {
             reject(new Error([
                 &#39;Watcher took too long to load&#39;,
                 &#39;Try running `watchman version` from your terminal&#39;,
                 &#39;https://facebook.github.io/watchman/docs/troubleshooting.html&#39;,
             ].join(&#39;\n&#39;)));
             }, MAX_WAIT_TIME);

             watcher.once(&#39;ready&#39;, function () {
             clearTimeout(rejectTimeout);
             resolve(watcher);
             });
         });
         }
</code></pre>
</li>
</ol>
<p>Referrence:<em><a href="https://github.com/facebook/react-native/issues/7257" target="_blank" rel="external">https://github.com/facebook/react-native/issues/7257</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Js change does not reflect on device/simulator when you try reload JS from packager.&lt;/p&gt;
&lt;p&gt;Try below solution might help.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;
    
    </summary>
    
    
      <category term="React Native" scheme="http://sharecode.cc/tags/React-Native/"/>
    
      <category term="Android" scheme="http://sharecode.cc/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Selection Sort - C#</title>
    <link href="http://sharecode.cc/2016/08/09/Algorithm-Selection-Sort-CS/"/>
    <id>http://sharecode.cc/2016/08/09/Algorithm-Selection-Sort-CS/</id>
    <published>2016-08-09T08:38:04.000Z</published>
    <updated>2016-12-14T08:13:00.535Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>Pick up one item from unordered list each loop, then set it to the end of orderred list.</p>
<h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><pre><code class="brush:c#">    class Sort {
        /// &lt;summary&gt;
        /// Direct Selection Sort
        /// &lt;/summary&gt;
        /// &lt;typeparam name=&quot;T&quot;&gt;Implement interface IComaparable to support Generics&lt;/typeparam&gt;
        /// &lt;param name=&quot;list&quot;&gt;list contains value or object waiting for sort&lt;/param&gt;
        public static void DirectSelectionSort&lt;T&gt;(params T[] list) where T : IComparable
        {
            //Set deault value of object or value type
            T temp = default(T);
            //Keep the index of the smallest item
            int iMinIndex;

            for (int i = 0; i &lt; list.Length - 1; i++) {
                iMinIndex = i;

                //Pick up the smallest item to the end of the orderred list, then length of ordered list +1, length of unordered list -1
                for (int j = i + 1; j &lt; list.Length; j++) {
                    if (list[j].CompareTo(list[iMinIndex]) &lt; 0)
                    {
                        //Update the index of the smallest item
                        iMinIndex = j;
                    }
                }

                //Move the smallest item to the end of the orderred list if index changed.
                if (iMinIndex != i)
                {
                    temp = list[i];
                    list[i] = list[iMinIndex];
                    list[iMinIndex] = temp;
                }
            }
        }

        public static void ShowList&lt;T&gt;(T[] list) {
            Console.WriteLine(&quot;Items in list:&quot;);

            foreach (T t in list)
                Console.Write(t.ToString() + &quot; &quot;);

            Console.WriteLine();
        }
    }

    public class Animal : IComparable {
        public  string Name { get; set; }
        public int Weight { get; set; }

        public Animal(string name, int weight) {
            this.Name = name;
            this.Weight = weight;
        }

        public int CompareTo(object other)
        {
            return this.Weight.CompareTo((other as Animal).Weight);
        }

        public override string ToString()
        {
            return this.Name + &quot;&#39;s weight is &quot; + this.Weight;
        }
    }

    class Program {
        static void Main(string[] args)
        {
            int[] lstWaitforSelectionSorting = new int[10] { 23, 11, 3, 5, 6, 98, 45, 23, 11, 87 };

            Sort.ShowList(lstWaitforSelectionSorting);
            Sort.DirectSelectionSort(lstWaitforSelectionSorting);
            Sort.ShowList(lstWaitforSelectionSorting);

            Animal[] animals = new Animal[] { new Animal(&quot;Cow&quot;, 200), new Animal(&quot;Sheep&quot;, 100), new Animal(&quot;Fox&quot;, 50) };

            Sort.ShowList(animals);
            Sort.DirectSelectionSort(animals);
            Sort.ShowList(animals);

            Console.WriteLine();
        }
    }
</code></pre>
<h4 id="Result-in-Console"><a href="#Result-in-Console" class="headerlink" title="Result in Console"></a>Result in Console</h4><pre><code>Items in list:
23 11 3 5 6 98 45 23 11 87
Items in list:
3 5 6 11 11 23 23 45 87 98
Items in list:
Cow&#39;s weight is 200 Sheep&#39;s weight is 100 Fox&#39;s weight is 50
Items in list:
Fox&#39;s weight is 50 Sheep&#39;s weight is 100 Cow&#39;s weight is 200
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h4&gt;&lt;p&gt;Pick up one item from unordered list each loop, th
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://sharecode.cc/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Bubble Sort - C#</title>
    <link href="http://sharecode.cc/2016/08/08/Algorithm-Bubble-Sort-C/"/>
    <id>http://sharecode.cc/2016/08/08/Algorithm-Bubble-Sort-C/</id>
    <published>2016-08-08T07:40:18.000Z</published>
    <updated>2016-12-14T08:13:23.286Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>Compare two adjacent item in array, then swap the position if they are in inverse order. Pick up the biggest item and put it to the end of the array each loop.</p>
<h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><pre><code class="brush:c#">    public class BubbleSort {
        /// &lt;summary&gt;
        /// Bubble Sort
        /// &lt;/summary&gt;
        /// &lt;typeparam name=&quot;T&quot;&gt;Implement interface IComaparable to support Generics&lt;/typeparam&gt;
        /// &lt;param name=&quot;list&quot;&gt;list contains value or object waiting for sort&lt;/param&gt;
        public void Sort&lt;T&gt;(T[] list) where T : IComparable {
            T temp = default(T);

            for (int i = 0; i &lt; list.Length - 1; i++) {
                //A flag indicate whether need to swap items, if it is false means list is in order.
                bool  bolSwap = false;

                //Move the largest item to the end of unordered list each loop, then length of ordered list +1, length of unordered list -1
                for (int j = 0; j &lt; list.Length - 1 - i; j++)
                {
                    if (list[j].CompareTo(list[j + 1]) &gt; 0)
                    {
                        temp = list[j + 1];
                        list[j + 1] = list[j];
                        list[j] = temp;

                        //Swapped
                        bolSwap = true;
                    }
                }

                if (!bolSwap)
                    break;
            }
        }

        public void ShowList&lt;T&gt;(T[] list) {
            Console.WriteLine(&quot;Items in list:&quot;);

            foreach (T t in list)
                Console.Write(t.ToString() + &quot; &quot;);

            Console.WriteLine();
        }
    }

    public class Animal : IComparable {
        public  string Name { get; set; }
        public int Weight { get; set; }

        public Animal(string name, int weight) {
            this.Name = name;
            this.Weight = weight;
        }

        public int CompareTo(object other)
        {
            return this.Weight.CompareTo((other as Animal).Weight);
        }

        public override string ToString()
        {
            return this.Name + &quot;&#39;s weight is &quot; + this.Weight;
        }
    }

    class Program {
        static void Main(string[] args)
        {
            int[] intWaitforSorting = new int[] { 23, 11, 3, 5, 6, 98, 45, 23, 11, 87 };

            Animal cat = new Animal(&quot;Cat&quot;, 10);
            Animal dog = new Animal(&quot;Dog&quot;, 20);
            Animal tiger = new Animal(&quot;Tiger&quot;, 200);

            Animal[] animalForSorting = new Animal[]{dog,cat,tiger};

            BubbleSort objBubbleSort = new BubbleSort();

            objBubbleSort.ShowList(intWaitforSorting);
            objBubbleSort.Sort(intWaitforSorting);
            objBubbleSort.ShowList(intWaitforSorting);

            objBubbleSort.ShowList(animalForSorting);
            objBubbleSort.Sort(animalForSorting);
            objBubbleSort.ShowList(animalForSorting);

            Console.WriteLine();
        }
    }
</code></pre>
<h4 id="Result-in-Console"><a href="#Result-in-Console" class="headerlink" title="Result in Console"></a>Result in Console</h4><pre><code>Items in list:
23 11 3 5 6 98 45 23 11 87
Items in list:
3 5 6 11 11 23 23 45 87 98
Items in list:
Dog&#39;s weight is 20 Cat&#39;s weight is 10 Tiger&#39;s weight is 200
Items in list:
Cat&#39;s weight is 10 Dog&#39;s weight is 20 Tiger&#39;s weight is 200
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h4&gt;&lt;p&gt;Compare two adjacent item in array, then swap the 
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://sharecode.cc/tags/Algorithm/"/>
    
  </entry>
  
</feed>
