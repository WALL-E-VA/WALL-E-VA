<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>http://sharecode.cc/444</title>
  <subtitle>Tianmin&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sharecode.cc/"/>
  <updated>2016-12-08T06:24:30.879Z</updated>
  <id>http://sharecode.cc/</id>
  
  <author>
    <name>Tianmin</name>
    <email>181949031@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ASP.NET Core中的Program和Startup类</title>
    <link href="http://sharecode.cc/2016/12/06/Aspnet-Core-Web-GetStarted/"/>
    <id>http://sharecode.cc/2016/12/06/Aspnet-Core-Web-GetStarted/</id>
    <published>2016-12-06T07:35:01.000Z</published>
    <updated>2016-12-08T06:24:30.879Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p><strong>ASP.NET Core简介</strong></p>
<p> ASP.NET Core可用于构建Web应用, 移动应用后端的框架，它是开源且跨平台支持。ASP.NET Core应用可以在.NET Core或者完整的.NET Framework上运行。用户在构建解决方案时可以获得很高的灵活性，因为ASP.NET Core应用是由模块化的组件组成的。用户可以在Windows, Mac和Linux系统中进行跨平台开发并运行应用，ASP.NET Core的开源地址<a href="https://github.com/aspnet" target="_blank" rel="external">GitHub</a>.</p>
<p> ASP.NET Core不在以System.Web.dll为基础，比之前的ASP.NET更加的精简且模块化，现在以Nuget包为基础，用户可以根据需要只使用必要的包。ASP.NET Core较之前ASP.NET版本是Web应用和Web API有统一的构建模式、集成了流行的前端框架和开发流程、包含内置的依赖注入方案、轻量级且模块化的HTTP请求处理管道、 应用可以托管在IIS上，也可以自托管等。</p>
</li>
<li><p><strong>Program类</strong></p>
<p> 这个类在应用的根目下，是一个控制台程序，其中<code>Main</code>方法来构建Web服务器,使用<code>WebHostBuilder</code>来创建Web应用的宿主，这一过程使用建造者模式。方法中指定使用什么Web服务器，可以指定多个选项如<code>UseKestrel()</code>和<code>UseIISIntegration</code>,时用<code>UseStartup&lt;TStartup&gt;()</code>方法来指定应用的启动类，在TStartup类中配置应用的请求管道，用<code>UseContentRoo()</code>方法指定应用的根目录。<code>Build()</code>方法创建Web应用的宿主，<code>Run()</code>方法运行Web应用并开始监听HTTP请求。其中以<code>Use</code>为前缀的方法都由<code>IWebHostBuilder</code>接口的扩展方法来提供。</p>
 <figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> host = <span class="keyword">new</span> WebHostBuilder()</div><div class="line">            .UseKestrel()</div><div class="line">            .UseContentRoot(Directory.GetCurrentDirectory())</div><div class="line">            .UseIISIntegration()</div><div class="line">            .UseStartup&lt;Startup&gt;()</div><div class="line">            .Build();</div><div class="line"></div><div class="line">        host.Run();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>Startup类</strong></p>
<p> <code>Startup</code>类用来定义请求的处理管道、配置应用所需要时用的服务。ASP.NET应用最少要包含一个<code>Startup</code>类，当一个应用启动时，ASP.NET会在主程序集的所有命名空间中检索名字为<code>Startup</code>的类。<code>Startup</code>类不必须是公有的。如果有多个<code>Startup</code>类的情况，ASP.NET将会在工程的根命名空间中寻找一个，如果没有找到将继续按命名空间的字母顺序寻找。可以为不同的<a href="#">环境</a>分别定义<code>Startup</code>类，在运行时会根据不同的环境在挑选一个合适的。</p>
<ul>
<li><p><code>Startup</code>类的构造函数</p>
<p><code>Startup</code>可以进行构造函数依赖注入，依赖通过<a href="#">内置的依赖注入容器<code>dependency injection</code></a>来提供，通过<code>IHostingEnvironment</code>的实例<code>env</code>来设定<a href="#">IConfigurationRoot</a>实例变量<code>Configuration</code>所需的数据源以便在<code>ConfigureService</code>和<code>Configure</code>方法中读取。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> IConfigurationRoot Configuration &#123; <span class="keyword">get</span>; &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Startup</span>(<span class="params">IHostingEnvironment env</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder()</div><div class="line">        .SetBasePath(env.ContentRootPath)</div><div class="line">        .AddJsonFile(<span class="string">"appsettings.json"</span>, optional: <span class="literal">true</span>, reloadOnChange: <span class="literal">true</span>)</div><div class="line">        <span class="comment">//通过IHostingEnvironment的实例env来设定实例变量Configuration所需的数据源</span></div><div class="line">        .AddJsonFile(<span class="string">$"appsettings.<span class="subst">&#123;env.EnvironmentName&#125;</span>.json"</span>, optional: <span class="literal">true</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (env.IsDevelopment())</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// For more details on using the user secret store see https://go.microsoft.com/fwlink/?LinkID=532709</span></div><div class="line">        builder.AddUserSecrets();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    builder.AddEnvironmentVariables();</div><div class="line">    Configuration = builder.Build();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>Configure</code>方法</p>
<p><code>Startup</code>类必须包含一个<code>Configure</code>方法，应用在启动时会先调用<code>ConfigureService</code>然后再调用<code>Configure</code>方法。<br><code>Configure</code>方法用来定义应用如何响应<code>HTTP</code>请求。通过向<code>IApplicationBuilder</code>实例中添加<a href="#">中间件</a>组件来配置请求管道，可以看到下面示例代码中通过调用<code>IApplicationBuilde</code>的扩展方法来配置执行管道以获得中间件的支持如error pages、BrowserLink、static files、ASP.NET MVC和Identity，调用<code>use</code>为前缀的扩展方将每一个中间件加入到执行管道中，例如用<code>UseMVC</code>扩展方法把路由中间件加入到请求管道中，并用MVC为默认的路由处理器。还有一些服务例如<code>IHostingEnvironment</code>和<code>ILoggerFactory</code>可以通过方法签名以参数方式注入。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory</span>)</span></div><div class="line">&#123;</div><div class="line">    loggerFactory.AddConsole(Configuration.GetSection(<span class="string">"Logging"</span>));</div><div class="line">    loggerFactory.AddDebug();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (env.IsDevelopment())</div><div class="line">    &#123;</div><div class="line">        app.UseDeveloperExceptionPage();</div><div class="line">        app.UseDatabaseErrorPage();</div><div class="line">        app.UseBrowserLink();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        app.UseExceptionHandler(<span class="string">"/Home/Error"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    app.UseStaticFiles();</div><div class="line"></div><div class="line">    app.UseIdentity();</div><div class="line"></div><div class="line">    <span class="comment">// Add external authentication middleware below. To configure them please see https://go.microsoft.com/fwlink/?LinkID=532715</span></div><div class="line"></div><div class="line">    app.UseMvc(routes =&gt;</div><div class="line">    &#123;</div><div class="line">        routes.MapRoute(</div><div class="line">            name: <span class="string">"default"</span>,</div><div class="line">            template: <span class="string">"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;"</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>ConfigureService</code>方法</p>
<p><code>ConfigureService</code>方法是可选的，应用在启动时会先于<code>Configure</code>方法被调用，因为功能要在被绑定到执行管道之前注册进来。方法中通过调用<code>IServiceCollection</code>的扩展方法<code>Add[Something]</code>来配置应用需要使用到的服务如Entity Framework、Identity和MVC。通过依赖注入可以使加入到服务容器中服务在应用中可用。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// This method gets called by the runtime. Use this method to add services to the container.</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Add framework services.</span></div><div class="line">    services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;</div><div class="line">        options.UseSqlite(Configuration.GetConnectionString(<span class="string">"DefaultConnection"</span>)));</div><div class="line"></div><div class="line">    services.AddIdentity&lt;ApplicationUser, IdentityRole&gt;()</div><div class="line">        .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;()</div><div class="line">        .AddDefaultTokenProviders();</div><div class="line"></div><div class="line">    services.AddMvc();</div><div class="line"></div><div class="line">    <span class="comment">// Add application services.</span></div><div class="line">    services.AddTransient&lt;IEmailSender, AuthMessageSender&gt;();</div><div class="line">    services.AddTransient&lt;ISmsSender, AuthMessageSender&gt;();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到ASP.NET Corez在应用启动时通过依赖注入提供服务给应用程序，用户可以通过在<code>Startup</code>类构造函数或<code>Configure</code>和<code>ConfigureService</code>方法中以参数的方式得到需要使用的服务。上面代码中方法的执行顺序如下：</p>
</li>
</ul>
<ol>
<li>Startup(IHostingEnvironment env)</li>
<li>ConfigureServices(IServiceCollection services)</li>
<li>Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)</li>
</ol>
</li>
</ol>
<p><em>原文链接:</em></p>
<ol>
<li><em><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/startup" target="_blank" rel="external">https://docs.microsoft.com/en-us/aspnet/core/fundamentals/startup</a></em></li>
<li><em><a href="https://docs.microsoft.com/en-us/aspnet/core/" target="_blank" rel="external">https://docs.microsoft.com/en-us/aspnet/core/</a></em></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ASP.NET Core简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; ASP.NET Core可用于构建Web应用, 移动应用后端的框架，它是开源且跨平台支持。ASP.NET Core应用可以在.NET Core或者完整的.NET Framewo
    
    </summary>
    
    
      <category term="ASP.NET Core" scheme="http://sharecode.cc/tags/ASP-NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core 开发常见问题汇总</title>
    <link href="http://sharecode.cc/2016/12/06/Aspnet-Core-Trouble-Shooting/"/>
    <id>http://sharecode.cc/2016/12/06/Aspnet-Core-Trouble-Shooting/</id>
    <published>2016-12-06T06:08:45.000Z</published>
    <updated>2016-12-06T07:27:07.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p><strong>使用VS Code 调试 ASP.NET Core Web 应用常见问题</strong></p>
<ul>
<li><p>Error - Could not find the preLaunchTask ‘build’.<br><img src="http://og24yrsh2.bkt.clouddn.com/AspnetcoreNoPreLanchTaskBuild.png" alt="AspnetcoreNoPreLanchTaskBuild"><br>问题原因是在launch.json里配置了在应用执行前预先执行的任务，但找不到相应的任务。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"preLaunchTask": "build"</div></pre></td></tr></table></figure>
<p>点击’Confiure Task Runner’，然后在下图中选择’.NET Core’<br><img src="http://og24yrsh2.bkt.clouddn.com/AspnetcoreTaskRunner.png" alt="AspnetcoreTaskRunner"></p>
<p>在.vscode文件夹下生成tasks.json文件，内容如下，用于编译应用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    // See https://go.microsoft.com/fwlink/?LinkId=733558</div><div class="line">    // for the documentation about the tasks.json format</div><div class="line">    "version": "0.1.0",</div><div class="line">    "command": "dotnet",</div><div class="line">    "isShellCommand": true,</div><div class="line">    "args": [],</div><div class="line">    "tasks": [</div><div class="line">        &#123;</div><div class="line">            "taskName": "build",</div><div class="line">            "args": [ ],</div><div class="line">            "isBuildCommand": true,</div><div class="line">            "showOutput": "silent",</div><div class="line">            "problemMatcher": "$msCompile"</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Error- launch: launch.json must be configured. Change ‘program’ to the path to the executable file that you would like to debug.<br><img src="http://og24yrsh2.bkt.clouddn.com/AspnetcoreNoExecutableFile.png" alt="AspnetcoreNoExecutableFile"><br>问题的原因是找不到可执行文件</p>
<p>点击’open launch.json’可以看到节点</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"program": "$&#123;workspaceRoot&#125;/bin/Debug/&lt;target-framework&gt;/&lt;project-name.dll&gt;"</div></pre></td></tr></table></figure>
<p>将其中<target-framework>和<project-name.dll>替换成工程中bin目录下的真实目录即可。</project-name.dll></target-framework></p>
</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;使用VS Code 调试 ASP.NET Core Web 应用常见问题&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Error - Could not find the preLaunchTask ‘build’.&lt;br&gt;&lt;img 
    
    </summary>
    
    
      <category term="ASP.NET Core" scheme="http://sharecode.cc/tags/ASP-NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>使用PlantUML画类图</title>
    <link href="http://sharecode.cc/2016/11/08/Write-Class-Diagram-PlantUML/"/>
    <id>http://sharecode.cc/2016/11/08/Write-Class-Diagram-PlantUML/</id>
    <published>2016-11-08T08:58:37.000Z</published>
    <updated>2016-12-05T05:23:57.759Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类图-Class-Diagram-表示类与类之间的关系，利用PlantUML来描述这些关系的基本用法如下："><a href="#类图-Class-Diagram-表示类与类之间的关系，利用PlantUML来描述这些关系的基本用法如下：" class="headerlink" title="类图(Class Diagram)表示类与类之间的关系，利用PlantUML来描述这些关系的基本用法如下："></a>类图(Class Diagram)表示类与类之间的关系，利用PlantUML来描述这些关系的基本用法如下：</h3><ol>
<li><p>泛化(Generalization)</p>
<ul>
<li>继承(Extend) - 子类继承父类</li>
<li>实现(Implement) - 具体类实现公共借口</li>
</ul>
</li>
</ol>
<ul>
<li><p>Demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">@startuml</div><div class="line">    package Extend &lt;&lt;Folder&gt;&gt; &#123;</div><div class="line">        class Animal &#123;</div><div class="line">            +name string</div><div class="line">            +void breathe()</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        class Human&#123;</div><div class="line">            +name string</div><div class="line">            +void breathe()</div><div class="line">            +void Inovate()</div><div class="line">            +void Drive(ICar car)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    package implement &lt;&lt;Folder&gt;&gt; &#123;</div><div class="line">        interface ICar &#123;</div><div class="line">            +name string</div><div class="line">            +void Run()</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        class BMW &#123;</div><div class="line">            +name string</div><div class="line">            +void Run()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /&apos;泛化 - 继承类&apos;/</div><div class="line">    Human -up--|&gt; Animal : extends</div><div class="line"></div><div class="line">    /&apos;泛化 - 实现接口&apos;/</div><div class="line">    BMW -up..|&gt; ICar : implements</div><div class="line">@enduml</div></pre></td></tr></table></figure>
</li>
<li><p>Class Diagram<br><img src="http://og24yrsh2.bkt.clouddn.com/Generalization.png" alt="Generalization"></p>
</li>
</ul>
<ol>
<li><p>依赖(Dependency)</p>
<p> 一个类依赖于另外一个类，是一种临时性，有偶然性质的关系，例如人使用手机打电话就是一种临时性的联系，只有人在需要打电话时才产生依赖关系，所以对象之间耦合度低或说联系较弱。在面向对象的语言中般实现为形参，局部变量或静态方法调用。</p>
</li>
</ol>
<ul>
<li><p>Demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@startuml</div><div class="line">    class Person &#123;</div><div class="line">        +void Call(Phone phone)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Class Phone</div><div class="line"></div><div class="line">    /&apos;依赖关系用虚线单项箭头表示..&gt;箭头指向被依赖对象&apos;/</div><div class="line">    Person -right..&gt; Phone : use</div><div class="line">@enduml</div></pre></td></tr></table></figure>
</li>
<li><p>Class Diagram<br><img src="http://og24yrsh2.bkt.clouddn.com/Dependency.png" alt="Dependency"></p>
</li>
</ul>
<ol>
<li><p>关联(Association)</p>
<p> 关联表示类与类之间的关系，非偶然且长期的关系，关联的对象之间是平等的。关联关系可以是单向的、双向的、自关联及多维关联。</p>
<ul>
<li>单向关联 - 只有关联对象知道这种关系，被关联对象不知道这种关系，单向箭头指向被关联对象</li>
</ul>
</li>
</ol>
<ul>
<li><p>Demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@startuml</div><div class="line">    package Unidirectional &lt;&lt;cloud&gt;&gt; &#123;</div><div class="line">        class person</div><div class="line">        class TV</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /&apos;单项关联用实线箭头表示--&gt;&apos;/</div><div class="line">    person -right--&gt; TV : watch</div><div class="line">@enduml</div></pre></td></tr></table></figure>
</li>
<li><p>Class Diagram<br><img src="http://og24yrsh2.bkt.clouddn.com/UnidirectionalAssociation.png" alt="UnidirectionalAssociation"></p>
<ul>
<li>双向关联 - 实体之间默认的关联关系，被关联对象彼此都知道关联关系，没有箭头指向</li>
</ul>
</li>
<li><p>Demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@startuml</div><div class="line">    package Bidirectional &lt;&lt;Frame&gt;&gt; &#123;</div><div class="line">        class boyfriend</div><div class="line">        class girlfirend</div><div class="line"></div><div class="line">        /&apos;双向关联的对象用实线连接--&apos;/</div><div class="line">        boyfriend -right--girlfirend : marry</div><div class="line">    &#125;</div><div class="line">@enduml</div></pre></td></tr></table></figure>
</li>
<li><p>Class Diagram<br><img src="http://og24yrsh2.bkt.clouddn.com/BidirectionalAssociation.png" alt="BidirectionalAssociation"></p>
<ul>
<li>多维关联 - 表示多个实体之间的关系</li>
</ul>
</li>
<li><p>Demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@startuml</div><div class="line">    package N-ary &lt;&lt;Association&gt;&gt; &#123;</div><div class="line">        class owner</div><div class="line">        class buyer</div><div class="line">        class agent &#123;</div><div class="line">            void coordinate()</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        owner -- buyer</div><div class="line">        (owner,buyer) -- agent</div><div class="line">    &#125;</div><div class="line">@enduml</div></pre></td></tr></table></figure>
</li>
<li><p>Class Diagram<br><img src="http://og24yrsh2.bkt.clouddn.com/N-aryAssociation.png" alt="N-aryAssociation"></p>
<ul>
<li>自身关联 - 表示同一个实体多个实例之间的联系</li>
</ul>
</li>
<li><p>Demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@startuml</div><div class="line">    class bug</div><div class="line"></div><div class="line">    bug &quot;0..*&quot; -up-- &quot;1..*&quot; bug : propagate</div><div class="line">@enduml</div></pre></td></tr></table></figure>
</li>
<li><p>Class Diagram<br><img src="http://og24yrsh2.bkt.clouddn.com/SelfAssociation.png" alt="SelfAssociation"></p>
</li>
</ul>
<ol>
<li><p>聚合(Aggregation)</p>
<p> 聚合表示一种整体和局部的关系，整体和局部是一种不平等的关系，可以理解为”has - a”的关系，局部对象的生命周期独立于整体对象，例如人群和张三的关系，张三离开人群还在。</p>
</li>
</ol>
<ul>
<li><p>Demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@startuml</div><div class="line">    package Aggregation &lt;&lt;Frame&gt;&gt;&#123;</div><div class="line">        class crowd &#123;</div><div class="line">            ~List&lt;person&gt; people</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        class person</div><div class="line"></div><div class="line">        /&apos;聚合用空心菱形实线表示o--&apos;/</div><div class="line">        crowd o---right person : have</div><div class="line">    &#125;</div><div class="line">@enduml</div></pre></td></tr></table></figure>
</li>
<li><p>Class Diagram<br><img src="http://og24yrsh2.bkt.clouddn.com/Aggregation.png" alt="Aggregation"></p>
</li>
</ul>
<ol>
<li><p>组合(Composition)</p>
<p> 组合也表示一种整体和局部的关系，可以理解为”contain - a”的关系，整体和局部具有相同的生命周期，例如人和心、肺的关系。</p>
</li>
</ol>
<ul>
<li><p>Demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@startuml</div><div class="line">    package Composition &lt;&lt;frame&gt;&gt; &#123;</div><div class="line">        class Human &#123;</div><div class="line">            -Heart heart</div><div class="line">            -Lung lung </div><div class="line">        &#125;</div><div class="line"></div><div class="line">        class Heart</div><div class="line">        class Lung</div><div class="line"></div><div class="line">        /&apos;组合用实心菱形实线表示*--&apos;/</div><div class="line">        Human *-- Heart : contains</div><div class="line">        Human *-- Lung</div><div class="line">    &#125;</div><div class="line">@enduml</div></pre></td></tr></table></figure>
</li>
<li><p>Class Diagram<br><img src="http://og24yrsh2.bkt.clouddn.com/Composition.png" alt="Composition"></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;类图-Class-Diagram-表示类与类之间的关系，利用PlantUML来描述这些关系的基本用法如下：&quot;&gt;&lt;a href=&quot;#类图-Class-Diagram-表示类与类之间的关系，利用PlantUML来描述这些关系的基本用法如下：&quot; class=&quot;heade
    
    </summary>
    
    
      <category term="UML" scheme="http://sharecode.cc/tags/UML/"/>
    
      <category term="PlantUML" scheme="http://sharecode.cc/tags/PlantUML/"/>
    
      <category term="Class Diagram" scheme="http://sharecode.cc/tags/Class-Diagram/"/>
    
  </entry>
  
  <entry>
    <title>React Native - Picker</title>
    <link href="http://sharecode.cc/2016/11/04/React-Native-Picker/"/>
    <id>http://sharecode.cc/2016/11/04/React-Native-Picker/</id>
    <published>2016-11-04T09:27:37.000Z</published>
    <updated>2016-11-07T07:53:13.946Z</updated>
    
    <content type="html"><![CDATA[<h3 id="选择框"><a href="#选择框" class="headerlink" title="选择框"></a>选择框</h3><ul>
<li><p>selectedValue 当前选中值</p>
</li>
<li><p>mode <code>Android Only</code> 展现方式</p>
<ol>
<li>dialog:对话框形式 </li>
<li>dropdown:下拉框形式</li>
</ol>
</li>
<li><p>prompt <code>Android Only</code> 当以对话框形式显示时的提示标题</p>
</li>
<li><p>onValueChange 当选项变化时的回调 </p>
<ol>
<li>itemValue:当前选中的值</li>
<li>itemPosition:当前选中的项的索引</li>
</ol>
</li>
</ul>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    View,</div><div class="line">    StyleSheet,</div><div class="line">    Picker,</div><div class="line">    ToastAndroid,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">PickerDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentWillMount() &#123;</div><div class="line">        <span class="keyword">this</span>.City = [<span class="string">'Beijing'</span>,<span class="string">'ShangHai'</span>];</div><div class="line">        <span class="keyword">this</span>.BeijingDist = [<span class="string">'东城'</span>,<span class="string">'崇文'</span>, <span class="string">'西城'</span>,<span class="string">'宣武'</span>];</div><div class="line">        <span class="keyword">this</span>.ShangHaiDist = [<span class="string">'黄浦'</span>,<span class="string">'卢湾'</span>,<span class="string">'徐汇'</span>,<span class="string">'长宁'</span>,<span class="string">'静安'</span>];</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.state = &#123;</div><div class="line">            <span class="attr">selectedCity</span>: <span class="keyword">this</span>.City[<span class="number">0</span>],</div><div class="line">            <span class="attr">selectedDistrict</span>: <span class="keyword">this</span>.BeijingDist[<span class="number">0</span>],</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">let</span> CityOption = <span class="keyword">this</span>.City.map(<span class="function"><span class="keyword">function</span>(<span class="params">city</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> (</div><div class="line">                &lt;Picker.Item label = &#123;city&#125; value = &#123;city&#125;/&gt;</div><div class="line">            );</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        let District = null;</div><div class="line"></div><div class="line">        if (this.state.selectedCity === this.City[0]) &#123;</div><div class="line">            District = this.BeijingDist;</div><div class="line">        &#125; else &#123;</div><div class="line">            District = this.ShangHaiDist;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        let DistOption = District.map(function (dist) &#123;</div><div class="line">            return (</div><div class="line">                &lt;Picker.Item label=&#123;dist&#125; value=&#123;dist&#125; /&gt;</div><div class="line">            );</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;styles.flex&#125;&gt;</div><div class="line">                &lt;Picker</div><div class="line">                    selectedValue = &#123;this.state.selectedCity&#125;</div><div class="line">                    onValueChange = &#123;(city) =&gt; &#123;this.setState(&#123;selectedCity:city&#125;)&#125;&#125;</div><div class="line">                    mode = 'dropdown'</div><div class="line">                &gt;</div><div class="line">                    &#123;CityOption&#125;</div><div class="line">                &lt;/Picker&gt;</div><div class="line">                &lt;Picker</div><div class="line">                    selectedValue = &#123;this.state.selectedDistrict&#125;</div><div class="line">                    onValueChange = &#123;this.onDistrictChange&#125;</div><div class="line">                    mode = 'dialog'</div><div class="line">                    prompt = '选择区'</div><div class="line">                &gt;</div><div class="line">                    &#123;DistOption&#125;</div><div class="line">                &lt;/Picker&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    onDistrictChange = (itemValue, itemPosition) =&gt; &#123;</div><div class="line">        this.setState(&#123;</div><div class="line">            selectedDistrict: itemValue,</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        ToastAndroid.showWithGravity(`Selected index is $&#123;itemPosition&#125;`,ToastAndroid.SHORT,ToastAndroid.CENTER);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentWillUpdate(nextProps, nextStates) &#123;</div><div class="line">        //只变换区时执行一次。</div><div class="line">        //变换城市是执行两次，因为selectedCity和selectedDistrict相继发生变化，引起重新render()</div><div class="line">        ToastAndroid.showWithGravity(`City changed from $&#123;this.state.selectedDistrict&#125; to $&#123;nextStates.selectedDistrict&#125;`,ToastAndroid.SHORT,ToastAndroid.CENTER);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    flex: &#123;</div><div class="line">        flex:1,</div><div class="line">        justifyContent: 'center'</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="http://og24yrsh2.bkt.clouddn.com/Picker.gif" alt="Picker Demo"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;选择框&quot;&gt;&lt;a href=&quot;#选择框&quot; class=&quot;headerlink&quot; title=&quot;选择框&quot;&gt;&lt;/a&gt;选择框&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;selectedValue 当前选中值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mode &lt;code&gt;Android O
    
    </summary>
    
    
      <category term="React Native" scheme="http://sharecode.cc/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Hexo - Hightlight source code with Google Code Prettify</title>
    <link href="http://sharecode.cc/2016/11/03/Hexo_Hightlight/"/>
    <id>http://sharecode.cc/2016/11/03/Hexo_Hightlight/</id>
    <published>2016-11-03T07:39:27.000Z</published>
    <updated>2016-12-08T08:04:03.760Z</updated>
    
    <content type="html"><![CDATA[<p><em>It’s not recommended way to do hightlight since it breaks rule <a href="https://github.com/DavidAnson/markdownlint/blob/v0.2.0/doc/Rules.md#md033---inline-html" target="_blank" rel="external">no-inline-html</a></em></p>
<h3 id="Download-Prettify"><a href="#Download-Prettify" class="headerlink" title="Download Prettify"></a>Download Prettify</h3><ol>
<li>Download js from <a href="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js" target="_blank" rel="external">cdn.rawgit.com</a> or <a href="//cdn.bootcss.com/prettify/r298/prettify.min.js">www.bootcdn.cn</a></li>
<li>Save it to themes\landscape\source\js\</li>
<li>Download you prefer css from <a href="https://jmblog.github.io/color-themes-for-google-code-prettify/" target="_blank" rel="external">https://jmblog.github.io/color-themes-for-google-code-prettify/</a></li>
<li>Rename it as prettify.css, then save to source\css\prettify\</li>
</ol>
<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><ol>
<li><p>Add below code at the bottom of layout_partial\after-footer.ejs</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;%- js(<span class="string">'js/script'</span>,<span class="string">'js/run_prettify'</span>) %&gt;</div><div class="line">&lt;%- css('css/prettify/prettify') %&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>Using raw HTML <code>&lt;PRE&gt;</code> block in MD file as below</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">pre</span> <span class="attr">class</span>=<span class="string">"prettyprint linenums lang-cs"</span>&gt;</span></div><div class="line">int a = 0;</div><div class="line">string s = string.empty</div><div class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>Above markdown will display C# code as expectation</p>
<pre class="prettyprint linenums lang-cs">
int a = 0;
string s = string.empty
</pre>

</li>
</ol>
<h3 id="Hightlight-Style-Optional"><a href="#Hightlight-Style-Optional" class="headerlink" title="Hightlight Style (Optional)"></a>Hightlight Style (Optional)</h3><ol>
<li><p>You could find some customized style via blew links<br> <a href="https://jmblog.github.io/color-themes-for-google-code-prettify/" target="_blank" rel="external">https://jmblog.github.io/color-themes-for-google-code-prettify/</a><br> <a href="https://rawgit.com/google/code-prettify/master/styles/index.html" target="_blank" rel="external">https://rawgit.com/google/code-prettify/master/styles/index.html</a></p>
</li>
<li><p>Replace source\css\prettify\prettify.css with you downlaod CSS</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;It’s not recommended way to do hightlight since it breaks rule &lt;a href=&quot;https://github.com/DavidAnson/markdownlint/blob/v0.2.0/doc/Ru
    
    </summary>
    
    
      <category term="Hexo" scheme="http://sharecode.cc/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Design Pattern - Observer</title>
    <link href="http://sharecode.cc/2016/11/03/Design-Pattern-Observer/"/>
    <id>http://sharecode.cc/2016/11/03/Design-Pattern-Observer/</id>
    <published>2016-11-03T07:39:27.000Z</published>
    <updated>2016-11-08T06:59:42.676Z</updated>
    
    <content type="html"><![CDATA[<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><ol>
<li><p>当一个对象的行为或状态变化引起另外一组对象的行为或状态变化时，或者说一组对象需要关心某一个对象的变化而作出相应的变化时，可以使用观察者模式。</p>
</li>
<li><p>它定义了多对一的依赖关系，即多个观察者对一个被观察对象的依赖。</p>
</li>
<li><p>观察者模式可以实现观察者和被观察对象之间的解耦，各自对立变化不会影响彼此，被观察对象只需知晓观察着的抽象接口(行为)，不用关心观察者的具体行为，也不用关心观察着的数量。</p>
</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">Observer</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">class</span> <span class="title">Program</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="comment">//定义观察者即读者</span></div><div class="line">            Subscriber objSA = <span class="keyword">new</span> Subscriber(<span class="string">"Subscriber A"</span>);</div><div class="line">            Subscriber objSB = <span class="keyword">new</span> Subscriber(<span class="string">"Subscriber B"</span>);</div><div class="line"></div><div class="line">            <span class="comment">//定义被观察对象即订阅号</span></div><div class="line">            WeChatSubscrptionAccount objWSA = <span class="keyword">new</span> WeChatSubscrptionAccount(<span class="string">"WeChatSubscrption"</span>);</div><div class="line"></div><div class="line">            <span class="comment">//通过委托让订阅号知道需要通知哪些读者</span></div><div class="line">            objWSA.AddObserver(<span class="keyword">new</span> NotifyObserver(objSA.DoSomething));</div><div class="line">            objWSA.AddObserver(<span class="keyword">new</span> NotifyObserver(objSB.DoSomething));</div><div class="line"></div><div class="line">            <span class="comment">//被观察者行为即订阅号发布新文章</span></div><div class="line">            objWSA.CreateNewArticle(<span class="keyword">new</span> EventArgs());</div><div class="line">            Console.Read();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//委托用来引用观察者抽象行为，即读、不读、退订或其它</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">NotifyObserver</span>(<span class="params">Subject Sender, EventArgs e</span>)</span>;</div><div class="line"></div><div class="line">    <span class="comment">//抽象被观察对象</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Subject</span> &#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Subject</span>(<span class="params"><span class="keyword">string</span> strName</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.Name = strName;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//定义被观察对象的行为</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">event</span> NotifyObserver SubjectAct;</div><div class="line"></div><div class="line">        <span class="comment">//当被观察对象的行为发生时，观察者会做出相应的反应</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnSubjectAct</span>(<span class="params">EventArgs e</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="comment">//如果已经有观察者</span></div><div class="line">            <span class="keyword">if</span> (SubjectAct != <span class="literal">null</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">//观察者的具体行为</span></div><div class="line">                SubjectAct(<span class="keyword">this</span>, e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//被观察对象保持观察者的抽象行为</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddObserver</span>(<span class="params">NotifyObserver objObserverAct</span>)</span></div><div class="line">        &#123;</div><div class="line">            SubjectAct += objObserverAct;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//被观察对象移除观察者的抽象行为</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveObserver</span>(<span class="params">NotifyObserver objObserverAct</span>)</span></div><div class="line">        &#123;</div><div class="line">            SubjectAct -= objObserverAct;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//具体被观察对象，微信订阅号</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeChatSubscrptionAccount</span> : <span class="title">Subject</span> &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WeChatSubscrptionAccount</span>(<span class="params"><span class="keyword">string</span> strName</span>) : <span class="title">base</span>(<span class="params">strName</span>) </span>&#123; &#125;</div><div class="line"></div><div class="line">        <span class="comment">//当新文章创建后要通知所有订阅者</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateNewArticle</span>(<span class="params">EventArgs e</span>)</span></div><div class="line">        &#123;</div><div class="line">            Console.WriteLine(<span class="string">"Send new article."</span>);</div><div class="line"></div><div class="line">            <span class="comment">//通知所有订阅者</span></div><div class="line">            <span class="keyword">this</span>.OnSubjectAct(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//观察者</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Observer</span> &#123;</div><div class="line">        <span class="comment">//观察者抽象行为</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span>(<span class="params">Subject Sender, EventArgs e</span>)</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//具体观察者，读者</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Subscriber</span> : <span class="title">Observer</span> &#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">string</span> Name;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Subscriber</span>(<span class="params"><span class="keyword">string</span> strName</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">this</span>.Name = strName;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//读者具体行为</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSomething</span>(<span class="params">Subject Sender, EventArgs e</span>) </span>&#123;</div><div class="line">            Console.WriteLine(<span class="string">$"<span class="subst">&#123;<span class="keyword">this</span>.Name&#125;</span> is going to do something about <span class="subst">&#123;Sender.Name&#125;</span>."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;当一个对象的行为或状态变化引起另外一组对象的行为或状态变化时，或者说一组对象需要关心某一个对象的变
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://sharecode.cc/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>React Native DrawerLayoutAndroid(抽屉) 组件的使用</title>
    <link href="http://sharecode.cc/2016/10/13/React-Native-DrawerLayoutAndroid/"/>
    <id>http://sharecode.cc/2016/10/13/React-Native-DrawerLayoutAndroid/</id>
    <published>2016-10-13T04:15:42.000Z</published>
    <updated>2016-11-07T07:00:48.876Z</updated>
    
    <content type="html"><![CDATA[<p>DrawerLayout又称抽屉，一般用于显示或隐藏屏幕侧方的导航条(View)，用户通过手势滑动屏幕或点击按钮调用openDrawer()或closeDrawer()控制导航条(View)的显示。</p>
<p>属性如下：</p>
<ol>
<li><p>renderNavigationView - 设置回调函数指定要渲染的导航条(View) - 用户自定义View组件</p>
</li>
<li><p>drawerWidth - 设置滑动出的导航条(View)的宽度， Demo中设定屏幕的一半</p>
</li>
<li><p>drawerBackgroundColor - 设置滑动出的导航条(View)的背景色，可用rgba设置透明度</p>
</li>
<li><p>drawerPosition - 设置导航条(View)从哪一侧滑出，DrawerConsts.DrawerPosition.Left 或 DrawerConsts.DrawerPosition.Right</p>
</li>
<li><p>drawerLockMode - 设置导航条(View)锁定状态，’unlocked’处于为锁定状态，滑动手势和方法调用均可以打开或关闭导航条, ‘locked-closed’和’locked-open’表示NavigationView处于关闭或打开状态，并将其锁定不再响应手势，但依然可以通过openDrawer()或closeDrawer()控制打开或关闭。</p>
</li>
<li><p>keyboardDismissMode - 表示打开导航条(View)是如何处理已处于显示状态的键盘，此时键盘输入相应。’none’键盘继续保持显示状态，’on-drag’键盘自动隐藏。</p>
<p> <img src="http://og24yrsh2.bkt.clouddn.com/keyboardDismissMode.gif" alt="keyboardDismissMode=&#39;on-drag&#39;"></p>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p>statusBarBackgroundColor - API 21后支持，设置手机状态栏背景色，并且导航条(View)现实时会覆盖手机状态栏。</p>
<p> <img src="http://og24yrsh2.bkt.clouddn.com/statusBarBackgroundColor.gif" alt="statusBarBackgroundColor=&#39;#1e90ff&#39;"></p>
</li>
<li><p>onDrawerClose - 设置当导航条(View)关闭后的回调</p>
</li>
<li><p>onDrawerOpen - 设置当导航条(View)打开后的回调</p>
</li>
<li><p>onDrawerStateChanged - 设置当导航条(View)状态改变是的回调</p>
</li>
</ol>
<p><strong><em>注意:</em></strong> 导航条会在三种状态下切换。’idle’: 没有任何发生任何与导航条(View)的交互，’dragging’: 正在和导航条(View)发生交互，<br>打开或关闭的过程, ‘setting’ 表示导航条(View)已经完成打开或关闭。</p>
<p>Demo中导航条(View)点击Setting按钮后调用openDrawer()显示导航条，此过程中onDrawerStateChanged设置的回调执行了2次，导航条打开时状态从’idle’变为’dragging’, 此时显示第一次’State Changed‘，导航条完成显示动作，此时onDrawerOpen的回调被执行，显示’Drawer Opened’, 这时导航条状态由’dragging’变为’setting’, 再次显示’State Changed’，至次状态改变全部完成。导航条关闭时同理。</p>
<p><img src="http://og24yrsh2.bkt.clouddn.com/DrawerLayoutAndroid.gif" alt="onDrawerStateChanged"></p>
<p>DrawerLayoutAndroid方法有两个openDrawer()和closeDrawer()用于程序控制导航条开关。</p>
<p>Demo完整代码如下:</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    View,</div><div class="line">    Text,</div><div class="line">    StyleSheet,</div><div class="line">    DrawerLayoutAndroid,</div><div class="line">    Dimensions,</div><div class="line">    TouchableOpacity,</div><div class="line">    TextInput,</div><div class="line">    ToastAndroid,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">DLAExample</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.state = &#123;</div><div class="line">            <span class="attr">position</span>: DrawerLayoutAndroid.positions.Left,</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.Naview = (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.NavigationView&#125;</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Menu1<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Menu2<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Menu3<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">let</span> &#123; width &#125; = Dimensions.get(<span class="string">'window'</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (</div><div class="line">                <span class="xml"><span class="tag">&lt;<span class="name">DrawerLayoutAndroid</span></span></span></div><div class="line">                    <span class="attr">ref</span>=<span class="string">"DrawerLayout"</span></div><div class="line">                    <span class="attr">drawerWidth</span>=<span class="string">&#123;width</span> / <span class="attr">2</span>&#125;</div><div class="line">                    <span class="attr">drawerBackgroundColor</span>=<span class="string">'rgba(255,255,255,0.8)'</span></div><div class="line">                    <span class="attr">renderNavigationView</span>=<span class="string">&#123;()</span> =&gt; this.Naview&#125;</div><div class="line">                    drawerPosition=&#123;this.state.position&#125;</div><div class="line">                    keyboardDismissMode='on-drag'</div><div class="line">                    drawerLockMode='unlocked'</div><div class="line">                    statusBarBackgroundColor='#1e90ff'</div><div class="line">                    onDrawerClose=&#123;() =&gt; ToastAndroid.showWithGravity('Drawer Closed',ToastAndroid.SHORT, ToastAndroid.BOTTOM)&#125;</div><div class="line">                    onDrawerOpen=&#123;() =&gt; ToastAndroid.showWithGravity('Drawer Opened',ToastAndroid.SHORT, ToastAndroid.TOP)&#125;</div><div class="line">                    onDrawerStateChanged=&#123;() =&gt; ToastAndroid.showWithGravity('State Changed',ToastAndroid.SHORT, ToastAndroid.CENTER)&#125;</div><div class="line">                &gt;</div><div class="line">                    <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span> = <span class="string">&#123;styles.container&#125;</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">TouchableOpacity</span> </span></div><div class="line">                            <span class="attr">style</span>=<span class="string">&#123;styles.Button&#125;</span> </div><div class="line">                            <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt; &#123;</div><div class="line">                                    this.refs['DrawerLayout'].openDrawer();</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &gt;</div><div class="line">                            <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Setting<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">TextInput</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:200&#125;&#125;</span>&gt;</span>keyboard dismiss on drag<span class="tag">&lt;/<span class="name">TextInput</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">DrawerLayoutAndroid</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">    <span class="attr">container</span>: &#123;</div><div class="line">        <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">        <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">NavigationView</span>: &#123;</div><div class="line">        <span class="attr">flex</span>:<span class="number">1</span>,</div><div class="line">        <span class="attr">justifyContent</span>: <span class="string">'space-around'</span>,</div><div class="line">        <span class="attr">alignItems</span>: <span class="string">'center'</span>, </div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">Button</span>: &#123;</div><div class="line">        <span class="attr">height</span>:<span class="number">100</span>,</div><div class="line">        <span class="attr">width</span>:<span class="number">100</span>,</div><div class="line">        <span class="attr">margin</span>:<span class="number">20</span>,</div><div class="line">        <span class="attr">backgroundColor</span>:<span class="string">'#90ee90'</span>,</div><div class="line">        <span class="attr">borderRadius</span>: <span class="number">50</span>,</div><div class="line">        <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">        <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DrawerLayout又称抽屉，一般用于显示或隐藏屏幕侧方的导航条(View)，用户通过手势滑动屏幕或点击按钮调用openDrawer()或closeDrawer()控制导航条(View)的显示。&lt;/p&gt;
&lt;p&gt;属性如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;renderNavigationView - 设置回调函数指定要渲染的导航条(View) - 用户自定义View组件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;drawerWidth - 设置滑动出的导航条(View)的宽度， Demo中设定屏幕的一半&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;drawerBackgroundColor - 设置滑动出的导航条(View)的背景色，可用rgba设置透明度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;drawerPosition - 设置导航条(View)从哪一侧滑出，DrawerConsts.DrawerPosition.Left 或 DrawerConsts.DrawerPosition.Right&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;drawerLockMode - 设置导航条(View)锁定状态，’unlocked’处于为锁定状态，滑动手势和方法调用均可以打开或关闭导航条, ‘locked-closed’和’locked-open’表示NavigationView处于关闭或打开状态，并将其锁定不再响应手势，但依然可以通过openDrawer()或closeDrawer()控制打开或关闭。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;keyboardDismissMode - 表示打开导航条(View)是如何处理已处于显示状态的键盘，此时键盘输入相应。’none’键盘继续保持显示状态，’on-drag’键盘自动隐藏。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://og24yrsh2.bkt.clouddn.com/keyboardDismissMode.gif&quot; alt=&quot;keyboardDismissMode=&amp;#39;on-drag&amp;#39;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="React Native Android" scheme="http://sharecode.cc/tags/React-Native-Android/"/>
    
  </entry>
  
  <entry>
    <title>React Native ActivityIndicator 组件的使用</title>
    <link href="http://sharecode.cc/2016/10/09/React-Native-ActivityIndicator/"/>
    <id>http://sharecode.cc/2016/10/09/React-Native-ActivityIndicator/</id>
    <published>2016-10-09T09:34:22.000Z</published>
    <updated>2016-11-07T07:00:47.386Z</updated>
    
    <content type="html"><![CDATA[<p>ActivityIndicator 用来在应用进行一些耗时操作时显示一个旋转的圆形指示器，有以下属性。</p>
<ol>
<li><p>animating 决定显不显示indicator, 默认显示。</p>
</li>
<li><p>color 颜色</p>
</li>
<li><p>size 尺寸的可选值为’small’或者’large’, 默认值为’small’。Android平台支持传入数值作为参数。</p>
</li>
</ol>
<p>下面代码简单展示组件及其属性如何使用。<br><a id="more"></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    View,</div><div class="line">    StyleSheet,</div><div class="line">    ActivityIndicator,</div><div class="line">    Text,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityIndicatorExample</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="comment">//_timer用于保存setInterval函数返回定时器的ID</span></div><div class="line">    _timer: React.PropTypes.number;</div><div class="line"></div><div class="line">    <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentWillMount() &#123;</div><div class="line">        <span class="comment">//组建渲染前初始化组建状态，默认显示Indicator及其下面文字。</span></div><div class="line">        <span class="keyword">this</span>.setState(&#123;</div><div class="line">            <span class="attr">animating</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">opacity</span>: <span class="number">1</span></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span>(</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">ActivityIndicator</span></span></div><div class="line">                    <span class="attr">animating</span>=<span class="string">&#123;this.state.animating&#125;</span></div><div class="line">                    <span class="attr">color</span>=<span class="string">'mediumspringgreen'</span></div><div class="line">                    <span class="attr">size</span>=<span class="string">&#123;200&#125;</span></div><div class="line">                /&gt;</div><div class="line">                <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;&#123;opacity:</span> <span class="attr">this.state.opacity</span>&#125;&#125;&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">Text</span>&gt;</span>loading<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentDidMount() &#123;</div><div class="line">        //组建加载完成后设定定时函数</div><div class="line">        this.ToggleIndicator();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ToggleIndicator() &#123;</div><div class="line">        //每隔两秒切换Indicator显示的状态</div><div class="line">        this._timer = setInterval(() =&gt; &#123;</div><div class="line">            this.setState(&#123;</div><div class="line">                animating: !this.state.animating,</div><div class="line">                opacity: this.state.opacity === 1 ? 0 : 1,</div><div class="line">            &#125;);</div><div class="line">        &#125;, 2000);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentWillUnmount() &#123;</div><div class="line">        //组件卸载前取消由setInterval()方法设置的定时器</div><div class="line">        clearInterval(this._timer);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        flex: 1,</div><div class="line">        justifyContent: 'center',</div><div class="line">        alignItems: 'center',</div><div class="line">    &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>代码运行效果：<br><img src="http://og24yrsh2.bkt.clouddn.com/ezgif.com-gif-maker.gif" alt="ActivityIndicator Running"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ActivityIndicator 用来在应用进行一些耗时操作时显示一个旋转的圆形指示器，有以下属性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;animating 决定显不显示indicator, 默认显示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;color 颜色&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;size 尺寸的可选值为’small’或者’large’, 默认值为’small’。Android平台支持传入数值作为参数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面代码简单展示组件及其属性如何使用。&lt;br&gt;
    
    </summary>
    
    
      <category term="React Native" scheme="http://sharecode.cc/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Data Struct - Stack - C#</title>
    <link href="http://sharecode.cc/2016/09/07/Data-Struct-Stack-CS/"/>
    <id>http://sharecode.cc/2016/09/07/Data-Struct-Stack-CS/</id>
    <published>2016-09-07T02:58:05.000Z</published>
    <updated>2016-11-07T09:22:09.439Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">public static class Stack&lt;T&gt; &#123;</div><div class="line">    private static T[] values;</div><div class="line">    private static int capacity = 10;</div><div class="line">    private static int size = 0;</div><div class="line">    private static readonly Object objSync;</div><div class="line"></div><div class="line">    static Stack()&#123;</div><div class="line">        objSync = new object();</div><div class="line"></div><div class="line">        if (values == null) &#123;</div><div class="line">            lock (objSync) &#123;</div><div class="line">                if (values == null) &#123;</div><div class="line">                    values = new T[capacity];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    internal static void Push(T item) &#123;</div><div class="line">        if (values.Length == size) &#123;</div><div class="line">            T[] newValues = new T[values.Length + (values.Length /2)];</div><div class="line">            Array.Copy(values, newValues, values.Length);</div><div class="line">            values = newValues;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        values[size++] = item;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    internal static T Pop() &#123;</div><div class="line">        if (size &gt; 0) &#123;</div><div class="line">            return values[--size];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return default(T);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    internal static T Peek() &#123;</div><div class="line">        if (size &gt; 0)</div><div class="line">            return values[size - 1];</div><div class="line"></div><div class="line">        return default(T);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    internal static string ShowStack() &#123;</div><div class="line">        StringBuilder sb = new StringBuilder();</div><div class="line"></div><div class="line">        for (int i = size -1;i &gt; 0;i--)</div><div class="line">            sb.Append(values[i]==null? string.Empty: values[i].ToString() + " | ");</div><div class="line"></div><div class="line">        return sb.ToString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div
    
    </summary>
    
    
      <category term="Data Struct" scheme="http://sharecode.cc/tags/Data-Struct/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm BF for Pattern Matching in String</title>
    <link href="http://sharecode.cc/2016/09/01/BF-Algorithm-for-Pattern-Matching-in-String/"/>
    <id>http://sharecode.cc/2016/09/01/BF-Algorithm-for-Pattern-Matching-in-String/</id>
    <published>2016-09-01T01:22:51.000Z</published>
    <updated>2016-11-07T09:22:09.437Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">string</span> s = <span class="string">"abcdefg"</span>;</div><div class="line">    <span class="keyword">string</span> p = <span class="string">"ddc"</span>;</div><div class="line"></div><div class="line">    Stopwatch a =  Stopwatch.StartNew();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> index = BFIndexOf(s, p);</div><div class="line"></div><div class="line">    a.Stop();</div><div class="line"></div><div class="line">    Console.WriteLine(<span class="string">"The index of &#123;0&#125; in &#123;1&#125; is &#123;2&#125;, time elapsed &#123;3&#125;"</span>, p, s, index, a.Elapsed.TotalMilliseconds);</div><div class="line"></div><div class="line">    a.Restart();</div><div class="line"></div><div class="line">    index = BFIndexOf2(s, p);</div><div class="line"></div><div class="line">    a.Stop();</div><div class="line"></div><div class="line">    Console.WriteLine(<span class="string">"The index of &#123;0&#125; in &#123;1&#125; is &#123;2&#125;, time elapsed &#123;3&#125;"</span>, p, s, index, a.Elapsed.TotalMilliseconds);</div><div class="line"></div><div class="line">    Console.ReadKey();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">BFIndexOf</span>(<span class="params"><span class="keyword">string</span> s, <span class="keyword">string</span> p</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sLength = s.Length;</div><div class="line">    <span class="keyword">int</span> pLength = p.Length;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (i &lt; sLength)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (j &lt; pLength &amp;&amp; s[i] == p[j])</div><div class="line">        &#123;</div><div class="line">            i++;</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (j == pLength)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> i - j;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">BFIndexOf2</span>(<span class="params"><span class="keyword">string</span> s, <span class="keyword">string</span> p</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sLength = s.Length;</div><div class="line">    <span class="keyword">int</span> pLength = p.Length;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (i &lt; sLength &amp;&amp; j &lt; pLength)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (s[i] == p[j])</div><div class="line">        &#123;</div><div class="line">            i++;</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            i = i - j + <span class="number">1</span>;</div><div class="line">            j = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (j == pLength)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> i - j;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>The index of cde in abcdefg is 2, time elapsed in BFIndexOf 0.3359 
The index of cde in abcdefg is 2, time elapsed in BFIndexOf2 0.298
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/d
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://sharecode.cc/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Insertion Sort - C#</title>
    <link href="http://sharecode.cc/2016/08/26/Algorithm-Insertion-Sort-CS/"/>
    <id>http://sharecode.cc/2016/08/26/Algorithm-Insertion-Sort-CS/</id>
    <published>2016-08-26T08:38:04.000Z</published>
    <updated>2016-11-07T09:22:09.437Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>Pick up item one by one from unordered list to insert to ordered list.<br><a id="more"></a></p>
<h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">public class InsertionSort&lt;T&gt; where T: IComparer&lt;T&gt;</div><div class="line">&#123;</div><div class="line">    /// &lt;summary&gt;</div><div class="line">    /// Pick up item one by one from unordered list to insert to ordered list.</div><div class="line">    /// &lt;/summary&gt;</div><div class="line">    /// &lt;typeparam name="list"&gt;</div><div class="line">    /// List waiting for sort, item in it must be something implemented IComparer</div><div class="line">    /// &lt;/typeparam&gt;</div><div class="line">    public static void Sort(T[] list) &#123;</div><div class="line">        T temp;</div><div class="line">        int i, j;</div><div class="line"></div><div class="line">        for (i = 1; i &lt; list.Length; i++) &#123;</div><div class="line">            //Pick up one item by order in unordered list</div><div class="line">            temp = list[i];</div><div class="line">            //Index of the end of ordered list</div><div class="line">            j = i - 1;</div><div class="line"></div><div class="line">            //Start loop from the end of ordered list to find the right position for item in temp</div><div class="line">            //Loop until J reached the start of ordered list or temp is larger than </div><div class="line">            //or equal to some item in ordered list</div><div class="line">            while (j &gt;= 0 &amp;&amp; list[j].Compare(temp, list[j]) &lt; 0) &#123;</div><div class="line">                list[j + 1] = list[j];</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            //Set item in temp to right postion</div><div class="line">            list[j + 1] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void ShowList(T[] list) &#123;</div><div class="line">        foreach (T item in list)</div><div class="line">            Console.WriteLine(item.ToString());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Ball : IComparer&lt;Ball&gt; &#123;</div><div class="line">    public int Size &#123; get; set; &#125;</div><div class="line">    public string Name &#123; get; set; &#125;</div><div class="line"></div><div class="line">    public Ball(int size, string name) &#123;</div><div class="line">        this.Size = size;</div><div class="line">        this.Name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int Compare(Ball x, Ball y) &#123;</div><div class="line">        return x.Size.CompareTo(y.Size);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public override string ToString() &#123;</div><div class="line">        return this.Name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h4&gt;&lt;p&gt;Pick up item one by one from unordered list to insert to ordered list.&lt;br&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://sharecode.cc/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Reload JS Does Not Work</title>
    <link href="http://sharecode.cc/2016/08/15/Reload-JS-Does-Not-Work/"/>
    <id>http://sharecode.cc/2016/08/15/Reload-JS-Does-Not-Work/</id>
    <published>2016-08-15T07:35:12.000Z</published>
    <updated>2016-11-07T07:00:50.168Z</updated>
    
    <content type="html"><![CDATA[<p>Js change does not reflect on device/simulator when you try reload JS from packager.</p>
<p>Try below solution might help.</p>
<ol>
<li><p>Increase the const MAX_WAIT_TIME in %yourproject%\node_modules\react-native\node_modules\node-haste\lib\FileWatcher\index.js<br>or %yourproject%node_modules\react-native\packager\react-packager\src\node-haste\FileWatcher\index.js</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MAX_WAIT_TIME = <span class="number">360000</span>;</div></pre></td></tr></table></figure>
<p> Try blew if step 1 does not work</p>
</li>
<li><p>Change function ‘_createWatcher’</p>
<p> From:</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">key: <span class="string">'_createWatcher'</span>,</div><div class="line">    <span class="attr">value</span>: <span class="function"><span class="keyword">function</span> _createWatcher(<span class="params">rootConfig</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> watcher = <span class="keyword">new</span> WatcherClass(rootConfig.dir, &#123;</div><div class="line">        <span class="attr">glob</span>: rootConfig.globs,</div><div class="line">        <span class="attr">dot</span>: <span class="literal">false</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> rejectTimeout = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(timeoutMessage(WatcherClass)));</div><div class="line">        &#125;, MAX_WAIT_TIME);</div><div class="line"></div><div class="line">        watcher.once(<span class="string">'ready'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        clearTimeout(rejectTimeout);</div><div class="line">        resolve(watcher);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p> To:</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">key: <span class="string">'_createWatcher'</span>,</div><div class="line">    <span class="attr">value</span>: <span class="function"><span class="keyword">function</span> _createWatcher(<span class="params">rootConfig</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> watcher = <span class="keyword">new</span> WatcherClass(rootConfig.dir, &#123;</div><div class="line">        <span class="attr">glob</span>: rootConfig.globs,</div><div class="line">        <span class="attr">dot</span>: <span class="literal">false</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">const</span> rejectTimeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>([</div><div class="line">            <span class="string">'Watcher took too long to load'</span>,</div><div class="line">            <span class="string">'Try running `watchman version` from your terminal'</span>,</div><div class="line">            <span class="string">'https://facebook.github.io/watchman/docs/troubleshooting.html'</span>,</div><div class="line">        ].join(<span class="string">'\n'</span>)));</div><div class="line">        &#125;, MAX_WAIT_TIME);</div><div class="line"></div><div class="line">        watcher.once(<span class="string">'ready'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        clearTimeout(rejectTimeout);</div><div class="line">        resolve(watcher);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>Referrence:<em><a href="https://github.com/facebook/react-native/issues/7257" target="_blank" rel="external">https://github.com/facebook/react-native/issues/7257</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Js change does not reflect on device/simulator when you try reload JS from packager.&lt;/p&gt;
&lt;p&gt;Try below solution might help.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;
    
    </summary>
    
    
      <category term="React Native Android" scheme="http://sharecode.cc/tags/React-Native-Android/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Selection Sort - C#</title>
    <link href="http://sharecode.cc/2016/08/09/Algorithm-Selection-Sort-CS/"/>
    <id>http://sharecode.cc/2016/08/09/Algorithm-Selection-Sort-CS/</id>
    <published>2016-08-09T08:38:04.000Z</published>
    <updated>2016-11-07T09:22:09.436Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>Pick up one item from unordered list each loop, then set it to the end of orderred list.</p>
<h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Sort</span> &#123;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> Direct Selection Sort</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name="T"&gt;</span>Implement interface IComaparable to support Generics<span class="doctag">&lt;/typeparam&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="list"&gt;</span>list contains value or object waiting for sort<span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> DirectSelectionSort&lt;T&gt;(<span class="keyword">params</span> T[] list) <span class="keyword">where</span> T : IComparable</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//Set deault value of object or value type</span></div><div class="line">        T temp = <span class="keyword">default</span>(T);</div><div class="line">        <span class="comment">//Keep the index of the smallest item</span></div><div class="line">        <span class="keyword">int</span> iMinIndex;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.Length - <span class="number">1</span>; i++) &#123;</div><div class="line">            iMinIndex = i;</div><div class="line"></div><div class="line">            <span class="comment">//Pick up the smallest item to the end of the orderred list, then length of ordered list +1, length of unordered list -1</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; list.Length; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (list[j].CompareTo(list[iMinIndex]) &lt; <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="comment">//Update the index of the smallest item</span></div><div class="line">                    iMinIndex = j;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//Move the smallest item to the end of the orderred list if index changed.</span></div><div class="line">            <span class="keyword">if</span> (iMinIndex != i)</div><div class="line">            &#123;</div><div class="line">                temp = list[i];</div><div class="line">                list[i] = list[iMinIndex];</div><div class="line">                list[iMinIndex] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> ShowList&lt;T&gt;(T[] list) &#123;</div><div class="line">        Console.WriteLine(<span class="string">"Items in list:"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">foreach</span> (T t <span class="keyword">in</span> list)</div><div class="line">            Console.Write(t.ToString() + <span class="string">" "</span>);</div><div class="line"></div><div class="line">        Console.WriteLine();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Animal</span> : <span class="title">IComparable</span> &#123;</div><div class="line">    <span class="keyword">public</span>  <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Weight &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span>(<span class="params"><span class="keyword">string</span> name, <span class="keyword">int</span> weight</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.Name = name;</div><div class="line">        <span class="keyword">this</span>.Weight = weight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">CompareTo</span>(<span class="params"><span class="keyword">object</span> other</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Weight.CompareTo((other <span class="keyword">as</span> Animal).Weight);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Name + <span class="string">"'s weight is "</span> + <span class="keyword">this</span>.Weight;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">Program</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span>[] lstWaitforSelectionSorting = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>] &#123; <span class="number">23</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">98</span>, <span class="number">45</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">87</span> &#125;;</div><div class="line"></div><div class="line">        Sort.ShowList(lstWaitforSelectionSorting);</div><div class="line">        Sort.DirectSelectionSort(lstWaitforSelectionSorting);</div><div class="line">        Sort.ShowList(lstWaitforSelectionSorting);</div><div class="line"></div><div class="line">        Animal[] animals = <span class="keyword">new</span> Animal[] &#123; <span class="keyword">new</span> Animal(<span class="string">"Cow"</span>, <span class="number">200</span>), <span class="keyword">new</span> Animal(<span class="string">"Sheep"</span>, <span class="number">100</span>), <span class="keyword">new</span> Animal(<span class="string">"Fox"</span>, <span class="number">50</span>) &#125;;</div><div class="line"></div><div class="line">        Sort.ShowList(animals);</div><div class="line">        Sort.DirectSelectionSort(animals);</div><div class="line">        Sort.ShowList(animals);</div><div class="line"></div><div class="line">        Console.WriteLine();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Result-in-Console"><a href="#Result-in-Console" class="headerlink" title="Result in Console"></a>Result in Console</h4><pre><code>Items in list:
23 11 3 5 6 98 45 23 11 87
Items in list:
3 5 6 11 11 23 23 45 87 98
Items in list:
Cow&apos;s weight is 200 Sheep&apos;s weight is 100 Fox&apos;s weight is 50
Items in list:
Fox&apos;s weight is 50 Sheep&apos;s weight is 100 Cow&apos;s weight is 200
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h4&gt;&lt;p&gt;Pick up one item from unordered list each loop, th
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://sharecode.cc/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Bubble Sort - C#</title>
    <link href="http://sharecode.cc/2016/08/08/Algorithm-Bubble-Sort-C/"/>
    <id>http://sharecode.cc/2016/08/08/Algorithm-Bubble-Sort-C/</id>
    <published>2016-08-08T07:40:18.000Z</published>
    <updated>2016-11-07T09:22:09.437Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>Compare two adjacent item in array, then swap the position if they are in inverse order. Pick up the biggest item and put it to the end of the array each loop.</p>
<h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BubbleSort</span> &#123;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> Bubble Sort</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name="T"&gt;</span>Implement interface IComaparable to support Generics<span class="doctag">&lt;/typeparam&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="list"&gt;</span>list contains value or object waiting for sort<span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> Sort&lt;T&gt;(T[] list) <span class="keyword">where</span> T : IComparable &#123;</div><div class="line">        T temp = <span class="keyword">default</span>(T);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.Length - <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="comment">//A flag indicate whether need to swap items, if it is false means list is in order.</span></div><div class="line">            <span class="keyword">bool</span>  bolSwap = <span class="literal">false</span>;</div><div class="line"></div><div class="line">            <span class="comment">//Move the largest item to the end of unordered list each loop, then length of ordered list +1, length of unordered list -1</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; list.Length - <span class="number">1</span> - i; j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (list[j].CompareTo(list[j + <span class="number">1</span>]) &gt; <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    temp = list[j + <span class="number">1</span>];</div><div class="line">                    list[j + <span class="number">1</span>] = list[j];</div><div class="line">                    list[j] = temp;</div><div class="line"></div><div class="line">                    <span class="comment">//Swapped</span></div><div class="line">                    bolSwap = <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!bolSwap)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> ShowList&lt;T&gt;(T[] list) &#123;</div><div class="line">        Console.WriteLine(<span class="string">"Items in list:"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">foreach</span> (T t <span class="keyword">in</span> list)</div><div class="line">            Console.Write(t.ToString() + <span class="string">" "</span>);</div><div class="line"></div><div class="line">        Console.WriteLine();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Animal</span> : <span class="title">IComparable</span> &#123;</div><div class="line">    <span class="keyword">public</span>  <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Weight &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span>(<span class="params"><span class="keyword">string</span> name, <span class="keyword">int</span> weight</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.Name = name;</div><div class="line">        <span class="keyword">this</span>.Weight = weight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">CompareTo</span>(<span class="params"><span class="keyword">object</span> other</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Weight.CompareTo((other <span class="keyword">as</span> Animal).Weight);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Name + <span class="string">"'s weight is "</span> + <span class="keyword">this</span>.Weight;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">Program</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span>[] intWaitforSorting = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">23</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">98</span>, <span class="number">45</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">87</span> &#125;;</div><div class="line"></div><div class="line">        Animal cat = <span class="keyword">new</span> Animal(<span class="string">"Cat"</span>, <span class="number">10</span>);</div><div class="line">        Animal dog = <span class="keyword">new</span> Animal(<span class="string">"Dog"</span>, <span class="number">20</span>);</div><div class="line">        Animal tiger = <span class="keyword">new</span> Animal(<span class="string">"Tiger"</span>, <span class="number">200</span>);</div><div class="line"></div><div class="line">        Animal[] animalForSorting = <span class="keyword">new</span> Animal[]&#123;dog,cat,tiger&#125;;</div><div class="line"></div><div class="line">        BubbleSort objBubbleSort = <span class="keyword">new</span> BubbleSort();</div><div class="line"></div><div class="line">        objBubbleSort.ShowList(intWaitforSorting);</div><div class="line">        objBubbleSort.Sort(intWaitforSorting);</div><div class="line">        objBubbleSort.ShowList(intWaitforSorting);</div><div class="line"></div><div class="line">        objBubbleSort.ShowList(animalForSorting);</div><div class="line">        objBubbleSort.Sort(animalForSorting);</div><div class="line">        objBubbleSort.ShowList(animalForSorting);</div><div class="line"></div><div class="line">        Console.WriteLine();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Result-in-Console"><a href="#Result-in-Console" class="headerlink" title="Result in Console"></a>Result in Console</h4><pre><code>Items in list:
23 11 3 5 6 98 45 23 11 87
Items in list:
3 5 6 11 11 23 23 45 87 98
Items in list:
Dog&apos;s weight is 20 Cat&apos;s weight is 10 Tiger&apos;s weight is 200
Items in list:
Cat&apos;s weight is 10 Dog&apos;s weight is 20 Tiger&apos;s weight is 200
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h4&gt;&lt;p&gt;Compare two adjacent item in array, then swap the 
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://sharecode.cc/tags/Algorithm/"/>
    
  </entry>
  
</feed>
